{"version":3,"sources":["components/earth/wwwx/layer/starfield/SunPosition.js","components/earth/wwwx/layer/starfield/Celestial.js","components/earth/wwwx/layer/starfield/StarFieldProgram.js","components/earth/wwwx/layer/starfield/StarFieldLayer.js","components/earth/wwwx/shapes/TexturedSurfaceShape.js","components/earth/wwwx/shapes/satellites/Model.js","components/earth/wwwx/shapes/TexturedSurfacePolygon.js","components/earth/satelliteLayer.js","components/earth/layerConfig.js","components/earth/useEww.js","components/earth/Earth.js","components/datemanager/components/datelabel2/DateLabel.js","components/datemanager/components/datecontroller/useClock.js","components/datemanager/components/datecontroller/DateController.js","components/datemanager/components/dateselector/DateSelectorScale.js","components/datemanager/components/dateselector/DateSelector.js","components/datemanager/DateManager.js","components/controlpanel/ControlPanel.js","components/missionselector/MissionSelector.js","containers/MissionSelectorContainer.js","components/mapselector/MapSelector.js","containers/MapSelectorContainer.js","containers/HuePickerContainer.js","components/app/App.js","reportWebVitals.js","initGlobalStates.js","index.js"],"names":["Angle","WorldWind","ArgumentError","Logger","SunPosition","getAsGeographicLocation","date","Date","logMessage","LEVEL_SEVERE","celestialLocation","this","getAsCelestialLocation","celestialToGeographic","numDays","computeJulianDate","meanLongitude","normalizeAngle360","meanAnomaly","DEGREES_TO_RADIANS","eclipticLongitude","Math","sin","eclipticLongitudeRad","obliquityOfTheEcliptic","declination","asin","RADIANS_TO_DEGREES","rightAscension","atan","cos","tan","GMST","GHA","longitude","normalizedDegreesLongitude","latitude","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","dayFraction","getUTCHours","getUTCMinutes","getUTCSeconds","A","trunc","B","degrees","angle","Celestial","SUN","MERCURY","VENUS","MARS","JUPITER","SATURN","URANUS","NEPTUNE","getCelestialLocation","id","orbitalElements","d","computeSun","computeMercury","computeVenus","computeMars","computeJupiter","computeSaturn","computeUranus","computeNeptune","computePosition","N","i","w","a","e","M","E","aa","E1","abs","xv","yv","sqrt","v","atan2","r","xh","yh","zh","lon_corr","lonecl","latecl","getLonSun","lonsun","rsun","xg","yg","zg","ecl","xe","ye","ze","ra","dec","GpuProgram","Matrix","Color","StarFieldProgram","gl","FRAG_MODE_MIX_COLOR","FRAG_MODE_TEXTURE","FRAG_MODE_COLOR","vertexPointLocation","attributeLocation","mvpMatrixLocation","uniformLocation","numDaysLocation","magnitudeRangeLocation","textureUnitLocation","fragModeLocation","colorLocation","localState","mvpMatrix","magnitudeRange","textureUnit","fragMode","color","matrix","forceLoad","fromIdentity","equals","loadUniformMatrix","copy","uniform1f","minMag","maxMag","uniform2f","unit","uniform1i","TEXTURE0","mode","loadUniformColor","key","Layer","REDRAW_EVENT_TYPE","StarFieldLayer","starDataSource","pickEnabled","sunSize","showSun","_starDataSource","configuration","baseUrl","_sunImageSource","_matrix","_starsPositionsVboCacheKey","_numStars","_starData","_minMagnitude","Number","MAX_VALUE","_maxMagnitude","MIN_VALUE","_loadStarted","_minScale","_scale","MAX_SAFE_INTEGER","pow","_sunPositionsCacheKey","_sunBufferView","Float32Array","_MAX_GL_POINT_SIZE","showPlanets","jupiterSize","planets","url","size","_planetsBufferView","_cacheKeys","sunPosition","planetPositions","starPositions","value","invalidateStarData","dc","globe","is2D","haveResources","beginRendering","doDraw","endRendering","loadResources","sunTexture","gpuResourceCache","resourceForKey","planetTextures","every","planet","currentGlContext","fetchStarData","retrieveTexture","forEach","findAndBindProgram","enableVertexAttribArray","depthMask","loadCommonUniforms","renderStars","renderSun","renderPlanets","program","currentProgram","mvp","modelviewProjection","navigatorState","multiplyByScale","loadModelviewProjection","julianDate","time","loadNumDays","generateCacheKey","vboId","bindBuffer","ARRAY_BUFFER","createBuffer","positions","createStarsGeometry","putResource","length","bufferData","STATIC_DRAW","frameStatistics","incrementVboLoadCount","vertexAttribPointer","FLOAT","loadMagnitudeRange","loadFragMode","drawArrays","POINTS","getParameter","ALIASED_POINT_SIZE_RANGE","log","LEVEL_WARNING","min","_planetsPositionsVboCacheKey","bufferSubData","DYNAMIC_DRAW","textureSrc","bind","sunCelestialLocation","disableVertexAttribArray","self","xhr","XMLHttpRequest","onload","status","JSON","parse","response","sendRedrawRequest","toString","statusText","onerror","ontimeout","open","send","indexes","parseStarsMetadata","metadata","raIndex","Error","decIndex","magIndex","data","len","starInfo","magnitude","pointSize","push","max","floor","starMetaInfo","name","document","createEvent","initEvent","window","dispatchEvent","PickedObject","SurfacePolygon","ColladaScene","SurfaceShape","Model","model","satellite","position","_satellite","satelliteModel","draw","_model","modelData","rotations","translations","preRotations","scale","shortName","ignoreLocalTransforms","type","satShortName","nodesToHide","hideNodes","useTexturePaths","localTransforms","xRotation","x","yRotation","y","zRotation","z","xTranslation","yTranslation","zTranslation","preX","preY","preZ","jsonData","meshes","nodes","root","children","materials","hasOwnProperty","buffers","vertices","normals","uvs","indices","eVertices","eNormals","eUvs","eIndices","Uint16Array","node","mesh","worldMatrix","slice","console","info","material","reflective","diffuse","textures","mapId","enabled","render","Renderable","Position","modelsLayer","RenderableLayer","fetch","then","json","satelliteData","addRenderable","SatelliteModel","headingAxis","headingAdd","headingMultiply","bgLayers","service","layerNames","title","numLevels","format","sector","Sector","FULL_SPHERE","levelZeroDelta","Location","ovLayers","useEww","clon","clat","alt","starfield","atmosphere","background","names","dem","eww","useRef","useState","setProjection","geojsonlayers","setGeojsonlayers","altitude","aoi","pickedItems","ewwstate","setEwwState","copDemOn","bgIndex","ovIndex","northUp","wwd","current","headingIncrement","navigator","heading","setTimeout","runOperation","redraw","toggleAtmosphere","bool","getLayerByName","toggleStarfield","toggleNames","toggleBg","layers","displayName","toggleDem","elevationModel","EarthElevationModel","ElevationModel","addCoverage","TiledElevationCoverage","coverageSector","resolution","retrievalImageFormat","minElevation","maxElevation","urlBuilder","WcsTileUrlBuilder","enableRenderables","includes","j","renderables","renderable","renderableStartDate","userProperties","earthObservation","acquisitionInformation","acquisitionParameter","acquisitionStartTime","getTime","renderableStopDate","acquisitionStopTime","timeOffset","moveTo","goToAnimator","travelTime","goTo","setGlobeStates","lo","lookAtLocation","la","al","range","vp","bl","tr","view","viewport","polygon","pickTerrain","canvasCoordinates","height","terrainObject","round","err","width","getViewPolygon","viewpolygon","handleDoubleClick","recognizer","useEffect","removeAllCoverages","WorldWindow","redrawCallbacks","BasicWorldWindowController","prototype","applyLimits","WWMath","clamp","appDoubleClickRecognizer","ClickRecognizer","numberOfClicks","maxClickInterval","worldWindowController","clickDownRecognizer","recognizeSimultaneouslyWith","appDoubleTapRecognizer","TapRecognizer","numberOfTaps","tapDownRecognizer","starFieldLayer","atmosphereLayer","AtmosphereLayer","quicklookLayer","layer","l","WmsLayer","addLayer","deepPicking","removeGeojson","removeLayer","addGeojson","epoch","renderableLayer","properties","updated","ceil","random","GeoJSONParser","load","geometry","placemarkAttributes","PlacemarkAttributes","imageScale","imageColor","labelAttributes","offset","Offset","OFFSET_FRACTION","isPointType","isMultiPointType","attributes","isLineStringType","isMultiLineStringType","drawOutline","outlineColor","interiorColor","red","green","blue","outlineWidth","isPolygonType","isMultiPolygonType","ShapeAttributes","highlightAttributes","addWMS","setTime","toggleProjection","prevProj","supportedProjections","newProj","indexOf","projection","ProjectionWgs84","ProjectionEquirectangular","ProjectionMercator","ProjectionPolarEquidistant","toggleModel","toggleOv","Earth","viewdate","useGlobal","mapSettings","setMapSettings","mapSet","setMapSet","useHotkeys","style","left","DateLabel","highlight","animated","className","dateFormat","toUpperCase","useClock","autoStart","initdate","setDate","playing","step","refreshrate","ldate","intervalRef","timeoutRef","start","setInterval","toJSON","togglePause","clearTimeout","clearInterval","stop","reset","increaseSpeed","decreaseSpeed","forceDate","newdate","DateController","startdate","onDateChange","lastTap","setLasttap","onClick","now","DateSelectorScale","zoomfactor","opacity","timescale","setTimescale","useLayoutEffect","_start","_zoom","hour","monthcode","minute","lastday","lastmonth","lastyear","lasthour","lastminute","tics","offsetHeight","refdate","class","pos","label","pad","map","item","div","top","number","str","scaleText","ref","DateSelector","onFinalDateChange","onStepChange","MAXZOOM","DEFZOOM","selector","lastZoom","lastPos","scaledate","setScaledate","lastStartdate","setlLastStartdate","active","setActive","setStep","stepLabel","setStepLabel","setZoomfactor","doubleTap","handleDoubleTap","useSpring","posxy_drag","setyOnDrag","xy2","sety2","posy_wheel","setyOnWheel","useGesture","onDragEnd","onWheel","delta","first","down","movement","direction","velocity","xy","memo","getValue","immediate","config","onFrame","onRest","onDrag","event","zoom","touches","shiftKey","temp","lastzoom","lastdelta","currentzoom","decay","drag","useTouch","deltaoffset","duration","setValue","moveToDate","points","DateManager","selectorStartdate","setselectorStartdate","controllerStartdate","setcontrollerStartdate","labeldate","setLabelDate","dateLabelHighlight","setDateLabelHighlight","ControlPanel","props","setOpen","mr","set","vxvy","right","src","MissionSelector","initialmission","onMissionChange","mission","setMission","C_MissionSelector","MapSelector","onMapSettingsChange","draggable","C_MapSelector","HuePickerContainer","appcolor","onChangeComplete","documentElement","setProperty","hex","App","setViewdate","searching","handle","useFullScreenHandle","appColor","fullScreen","enter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","setGlobal","ReactDOM","StrictMode","getElementById"],"mappings":"idAiBIA,EAGAC,IAHAD,MACAE,EAEAD,IAFAC,cACAC,EACAF,IADAE,OA8JWC,EAvJK,CAQhBC,wBAAyB,SAAUC,GAC/B,GAAIA,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,0BAClD,gBAGZ,IAAIC,EAAoBC,KAAKC,uBAAuBN,GACpD,OAAOK,KAAKE,sBAAsBH,EAAmBJ,IASzDM,uBAAwB,SAAUN,GAC9B,GAAIA,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,yBAClD,gBAGZ,IAGIK,EAHaH,KAAKI,kBAAkBT,GAGb,QAEvBU,EAAgBL,KAAKM,kBAAkB,OAAU,SAAYH,GAE7DI,EAAcP,KAAKM,kBAAkB,QAAU,SAAYH,GAAWd,EAAMmB,mBAE5EC,EAAoBJ,EAAgB,MAAQK,KAAKC,IAAIJ,GAAe,IAAOG,KAAKC,IAAI,EAAIJ,GACxFK,EAAuBH,EAAoBpB,EAAMmB,mBAEjDK,GAA0B,OAAS,KAAYV,GAAWd,EAAMmB,mBAEhEM,EAAcJ,KAAKK,KAAKL,KAAKC,IAAIE,GAA0BH,KAAKC,IAAIC,IACpEvB,EAAM2B,mBAENC,EAAiBP,KAAKQ,KAAKR,KAAKS,IAAIN,GAA0BH,KAAKU,IAAIR,IACvEvB,EAAM2B,mBAQV,OALIP,GAAqB,IAAMA,EAAoB,MAC/CQ,GAAkB,KAIf,CACHH,YAAaA,EACbG,eAJJA,EAAiBjB,KAAKM,kBAAkBW,KAgB5Cf,sBAAuB,SAAUH,EAAmBJ,GAChD,IAAKI,EACD,MAAM,IAAIR,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,wBAClD,6BAEZ,GAAIH,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,wBAAyB,gBAGvF,IAGIK,EAHaH,KAAKI,kBAAkBT,GAGb,QAGvB0B,EAAOrB,KAAKM,kBAAkB,aAAe,gBAAkBH,GAG/DmB,EAAMtB,KAAKM,kBAAkBe,EAAOtB,EAAkBkB,gBAEtDM,EAAYlC,EAAMmC,4BAA4BF,GAElD,MAAO,CACHG,SAAU1B,EAAkBe,YAC5BS,UAAWA,IAUnBnB,kBAAmB,SAAUT,GACzB,GAAIA,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,oBAAqB,gBAGnF,IAAI4B,EAAO/B,EAAKgC,iBACZC,EAAQjC,EAAKkC,cAAgB,EAC7BC,EAAMnC,EAAKoC,aAKXC,GAJOrC,EAAKsC,cACHtC,EAAKuC,gBAGiB,GAFtBvC,EAAKwC,gBAE+B,MAAQ,GAErDP,GAAS,IACTF,GAAQ,EACRE,GAAS,IAGb,IAAIQ,EAAI1B,KAAK2B,MAAMX,EAAO,KACtBY,EAAI,EAAIF,EAAI1B,KAAK2B,MAAMD,EAAI,GAG/B,OAFW1B,KAAK2B,MAAM,QAAUX,EAAO,OAAShB,KAAK2B,MAAM,SAAWT,EAAQ,IAAME,EAAMQ,EAAI,OAEhFN,GAYlB1B,kBAAmB,SAASiC,GACxB,IAAIC,EAAQD,EAAU,IACtB,OAAOC,GAAS,EAAIA,EAASA,EAAQ,EAAI,IAAMA,EAAQ,IAAMA,ICzKjEnD,EACAC,IADAD,MAyOWoD,EAtOG,CAEdC,IAAK,EACLC,QAAS,EACTC,MAAO,EACPC,KAAM,EACNC,QAAS,EACTC,OAAQ,EACRC,OAAQ,EACRC,QAAS,EAETC,qBAXc,SAWOC,EAAIxD,GACrB,IAAIyD,EAEAC,EADe5D,EAAYW,kBAAkBT,GAC5B,UAGrB,OAAQwD,GACJ,KAAKnD,KAAK0C,IACNU,EAAkBpD,KAAKsD,WAAWD,GAClC,MAEJ,KAAKrD,KAAK2C,QACNS,EAAkBpD,KAAKuD,eAAeF,GACtC,MAEJ,KAAKrD,KAAK4C,MACNQ,EAAkBpD,KAAKwD,aAAaH,GACpC,MAEJ,KAAKrD,KAAK6C,KACNO,EAAkBpD,KAAKyD,YAAYJ,GACnC,MAEJ,KAAKrD,KAAK8C,QACNM,EAAkBpD,KAAK0D,eAAeL,GACtC,MAEJ,KAAKrD,KAAK+C,OACNK,EAAkBpD,KAAK2D,cAAcN,GACrC,MAEJ,KAAKrD,KAAKgD,OACNI,EAAkBpD,KAAK4D,cAAcP,GACrC,MAEJ,KAAKrD,KAAKiD,QACNG,EAAkBpD,KAAK6D,eAAeR,GAI9C,OAAOrD,KAAK8D,gBAAgBT,EAAGD,IAGnCG,eAtDc,SAsDCF,GAQX,MAAO,CAACU,EAPE,QAAU,WAAaV,EAOtBW,EAND,OAAS,KAAUX,EAMfY,EALJ,QAAU,WAAaZ,EAKhBa,EAJP,QAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,SAAW,aAAef,IAKxCG,aAjEc,SAiEDH,GAQT,MAAO,CAACU,EAPE,QAAU,SAAaV,EAOtBW,EAND,OAAS,QAAUX,EAMfY,EALJ,OAAU,WAAaZ,EAKhBa,EAJP,OAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAU,aAAef,IAKvCI,YA5Ec,SA4EFJ,GAQR,MAAO,CAACU,EAPE,QAAU,WAAaV,EAOtBW,EAND,OAAS,QAAUX,EAMfY,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,SAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAU,YAAef,IAKvCK,eAvFc,SAuFCL,GAQX,MAAO,CAACU,EAPE,SAAW,WAAaV,EAOvBW,EAND,MAAS,SAAWX,EAMhBY,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,QAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,OAAU,YAAef,IAKvCM,cAlGc,SAkGAN,GAQV,MAAO,CAACU,EAPE,SAAW,SAAaV,EAOvBW,EAND,OAAS,SAAWX,EAMhBY,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,QAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAW,YAAef,IAKxCO,cA7Gc,SA6GAP,GAQV,MAAO,CAACU,EAPE,QAAU,SAAYV,EAOrBW,EAND,MAAS,MAASX,EAMdY,EALJ,QAAU,SAAYZ,EAKfa,EAJP,SAAW,QAAUb,EAIXc,EAHV,QAAW,QAAUd,EAGRe,EAFb,SAAW,WAAcf,IAKvCQ,eAxHc,SAwHCR,GAQX,MAAO,CAACU,EAPE,SAAW,SAAYV,EAOtBW,EAND,KAAS,OAAUX,EAMfY,EALJ,SAAW,QAAWZ,EAKfa,EAJP,SAAW,SAAWb,EAIZc,EAHV,QAAW,QAAUd,EAGRe,EAFb,SAAW,WAAcf,IAKvCC,WAnIc,SAmIHD,GAQP,MAAO,CAACU,EAPE,EAOCC,EAND,EAMIC,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,EAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAW,YAAef,IAKxCS,gBA9Ic,SA8IET,EA9IF,GA8I0B,IAApBU,EAAmB,EAAnBA,EAAGC,EAAgB,EAAhBA,EAAGC,EAAa,EAAbA,EAAGC,EAAU,EAAVA,EAAGC,EAAO,EAAPA,EAAGC,EAAI,EAAJA,EAC/BL,EAAItE,EAAYa,kBAAkByD,GAAK1E,EAAMmB,mBAC7CwD,EAAIvE,EAAYa,kBAAkB0D,GAAK3E,EAAMmB,mBAC7CyD,EAAIxE,EAAYa,kBAAkB2D,GAAK5E,EAAMmB,mBAI7C,IAAI6D,GAFJD,EAAI3E,EAAYa,kBAAkB8D,GAAK/E,EAAMmB,oBAEjC2D,EAAIzD,KAAKC,IAAIyD,IAAM,EAAMD,EAAIzD,KAAKS,IAAIiD,IAElD,GAAID,GAAK,IACL,IAAK,IAAIG,EAAK,EAAGA,EAAK,GAAIA,IAAM,CAC5B,IAAIC,EAAKF,GAAKA,EAAIF,EAAIzD,KAAKC,IAAI0D,GAAKD,IAAM,EAAID,EAAIzD,KAAKS,IAAIkD,IAC3D,GAAI3D,KAAK8D,IAAID,EAAKF,GAAK,KAAO,CAC1BA,EAAIE,EACJ,MAEJF,EAAIE,EAIZ,IAAME,EAAKP,GAAKxD,KAAKS,IAAIkD,GAAKF,GACxBO,EAAKR,GAAKxD,KAAKiE,KAAK,EAAMR,EAAIA,GAAKzD,KAAKC,IAAI0D,IAE5CO,EAAIlE,KAAKmE,MAAMH,EAAID,GACnBK,EAAIpE,KAAKiE,KAAKF,EAAKA,EAAKC,EAAKA,GAE/BK,EAAKD,GAAKpE,KAAKS,IAAI4C,GAAKrD,KAAKS,IAAIyD,EAAIX,GAAKvD,KAAKC,IAAIoD,GAAKrD,KAAKC,IAAIiE,EAAIX,GAAKvD,KAAKS,IAAI6C,IACnFgB,EAAKF,GAAKpE,KAAKC,IAAIoD,GAAKrD,KAAKS,IAAIyD,EAAIX,GAAKvD,KAAKS,IAAI4C,GAAKrD,KAAKC,IAAIiE,EAAIX,GAAKvD,KAAKS,IAAI6C,IACnFiB,EAAKH,GAAKpE,KAAKC,IAAIiE,EAAIX,GAAKvD,KAAKC,IAAIqD,IAGnCkB,EAAW,YAAc,EAA8B7B,GAAKhE,EAAMmB,mBAElE2E,EAASzE,KAAKmE,MAAMG,EAAID,GAAMG,EAC9BE,EAAS1E,KAAKmE,MAAMI,EAAIvE,KAAKiE,KAAKI,EAAKA,EAAKC,EAAKA,IAOvDD,EAAKD,EAAIpE,KAAKS,IAAIgE,GAAUzE,KAAKS,IAAIiE,GACrCJ,EAAKF,EAAIpE,KAAKC,IAAIwE,GAAUzE,KAAKS,IAAIiE,GACrCH,EAAKH,EAAIpE,KAAKC,IAAIyE,GA3CiB,MA6CdpF,KAAKqF,UAAUhC,EAAGrD,KAAKsD,WAAWD,IAAlDiC,EA7C8B,EA6C9BA,OAAQC,EA7CsB,EA6CtBA,KACbD,GAAUjG,EAAM2B,mBAChBsE,EAAS7F,EAAYa,kBAAkBgF,GAAUjG,EAAMmB,mBAEvD,IAGMgF,EAAKT,EAHAQ,EAAO7E,KAAKS,IAAImE,GAIrBG,EAAKT,EAHAO,EAAO7E,KAAKC,IAAI2E,GAIrBI,EAAKT,EAELU,EAAMlG,EAAYa,kBAAkB,QAAU,SAAW+C,GAAKhE,EAAMmB,mBAEpEoF,EAAKJ,EACLK,EAAKJ,EAAK/E,KAAKS,IAAIwE,GAAOD,EAAKhF,KAAKC,IAAIgF,GACxCG,EAAKL,EAAK/E,KAAKC,IAAIgF,GAAOD,EAAKhF,KAAKS,IAAIwE,GAK9C,MAAO,CAACI,GAHGtG,EAAYa,kBAAkBI,KAAKmE,MAAMgB,EAAID,GAAMvG,EAAM2B,oBAGxDgF,IAFAtF,KAAKmE,MAAMiB,EAAIpF,KAAKiE,KAAKiB,EAAKA,EAAKC,EAAKA,IAAOxG,EAAM2B,qBAKrEqE,UAlNc,SAkNJhC,EAlNI,GAkNW,IAAXY,EAAU,EAAVA,EAAGE,EAAO,EAAPA,EAAGC,EAAI,EAAJA,EAChBH,EAAIxE,EAAYa,kBAAkB2D,GAAK5E,EAAMmB,mBAI7C,IAAM6D,GAFND,EAAI3E,EAAYa,kBAAkB8D,GAAK/E,EAAMmB,oBAE/B2D,EAAIzD,KAAKC,IAAIyD,IAAM,EAAMD,EAAIzD,KAAKS,IAAIiD,IAE9CK,EAAK/D,KAAKS,IAAIkD,GAAKF,EACnBO,EAAKhE,KAAKiE,KAAK,EAAMR,EAAIA,GAAKzD,KAAKC,IAAI0D,GAO7C,MAAO,CAACiB,OALE5E,KAAKmE,MAAMH,EAAID,GAGNR,EAEHsB,KAJH7E,KAAKiE,KAAKF,EAAKA,EAAKC,EAAKA,MC7N1CnF,EAKAD,IALAC,cACA0G,EAIA3G,IAJA2G,WACAzG,EAGAF,IAHAE,OACA0G,EAEA5G,IAFA4G,OACAC,EACA7G,IADA6G,MAmBEC,E,kDACF,WAAYC,GAAK,IAAD,8BACZ,cAAMA,EAAI,wmCAsCD,ufAsBA,CAAC,iBAELC,oBAAsB,EAC3B,EAAKC,kBAAoB,EACzB,EAAKC,gBAAkB,EAOvB,EAAKC,oBAAsB,EAAKC,kBAAkBL,EAAI,eAOtD,EAAKM,kBAAoB,EAAKC,gBAAgBP,EAAI,aAOlD,EAAKQ,gBAAkB,EAAKD,gBAAgBP,EAAI,WAOhD,EAAKS,uBAAyB,EAAKF,gBAAgBP,EAAI,kBAOvD,EAAKU,oBAAsB,EAAKH,gBAAgBP,EAAI,kBAOpD,EAAKW,iBAAmB,EAAKJ,gBAAgBP,EAAI,YAEjD,EAAKY,cAAgB,EAAKL,gBAAgBP,EAAI,SAE9C,EAAKa,WAAa,CACdC,UAAW,KACXhH,QAAS,KACTiH,eAAgB,KAChBC,YAAa,KACbC,SAAU,KACVC,MAAO,MArHC,E,2DAgIhB,SAAwBlB,EAAImB,GACxB,IAAKA,EACD,MAAM,IAAIjI,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,0BAA2B,kBAG9F,IAAI2H,GAAY,EACkB,OAA9BzH,KAAKkH,WAAWC,YAChBM,GAAY,EACZzH,KAAKkH,WAAWC,UAAYjB,EAAOwB,iBAGnCD,GAAczH,KAAKkH,WAAWC,UAAUQ,OAAOH,KAC/CxH,KAAK4H,kBAAkBvB,EAAImB,EAAQxH,KAAK2G,mBACxC3G,KAAKkH,WAAWC,UAAUU,KAAKL,M,yBAYvC,SAAYnB,EAAIlG,GACZ,GAAe,MAAXA,EACA,MAAM,IAAIZ,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,cAAe,mBAE9EE,KAAKkH,WAAW/G,UAAYA,IAC5BkG,EAAGyB,UAAU9H,KAAK6G,gBAAiB1G,GACnCH,KAAKkH,WAAW/G,QAAUA,K,gCAYlC,SAAmBkG,EAAI0B,EAAQC,GAC3B,GAAc,MAAVD,EACA,MAAM,IAAIxI,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,eAAgB,kBAEnF,GAAc,MAAVkI,EACA,MAAM,IAAIzI,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,eAAgB,kBAEnF,IAAI2H,GAAY,EACuB,OAAnCzH,KAAKkH,WAAWE,iBAChBK,GAAY,EACZzH,KAAKkH,WAAWE,eAAiB,CAACW,EAAQC,KAG1CP,GAAazH,KAAKkH,WAAWE,eAAe,KAAOW,GAAU/H,KAAKkH,WAAWE,eAAe,KAAOY,KACnG3B,EAAG4B,UAAUjI,KAAK8G,uBAAwBiB,EAAQC,GAClDhI,KAAKkH,WAAWE,eAAe,GAAKW,EACpC/H,KAAKkH,WAAWE,eAAe,GAAKY,K,6BAS5C,SAAgB3B,EAAI6B,GACZlI,KAAKkH,WAAWG,cAAgBa,IAChC7B,EAAG8B,UAAUnI,KAAK+G,oBAAqBmB,EAAO7B,EAAG+B,UACjDpI,KAAKkH,WAAWG,YAAca,K,0BAItC,SAAa7B,EAAIgC,GACTrI,KAAKkH,WAAWI,WAAae,IAC7BhC,EAAG8B,UAAUnI,KAAKgH,iBAAkBqB,GACpCrI,KAAKkH,WAAWI,SAAWe,K,uBAInC,SAAUhC,EAAIkB,GACV,IAAIE,GAAY,EACc,OAA1BzH,KAAKkH,WAAWK,QAChBE,GAAY,EACZzH,KAAKkH,WAAWK,MAAQ,IAAIpB,EAAM,EAAG,EAAG,EAAG,KAG3CsB,GAAczH,KAAKkH,WAAWK,MAAMI,OAAOJ,KAC3CvH,KAAKsI,iBAAiBjC,EAAIkB,EAAOvH,KAAKiH,eACtCjH,KAAKkH,WAAWK,MAAMM,KAAKN,Q,GAhORtB,GA0O/BG,EAAiBmC,IAAM,mCAERnC,QC/PXoC,GAIAlJ,IALA6G,MAKA7G,IAJAkJ,OACAhJ,EAGAF,IAHAE,OACA0G,EAEA5G,IAFA4G,OACAuC,EACAnJ,IADAmJ,kBA+hBWC,E,kDAjgBX,WAAYC,GAAiB,IAAD,uBACxB,cAAM,cAGDC,aAAc,EASnB,EAAKC,QAAU,IAOf,EAAKC,SAAU,EAGf,EAAKC,gBAAkBJ,GAAkBrJ,IAAU0J,cAAcC,QAAU,kBAC3E,EAAKC,gBAAkB5J,IAAU0J,cAAcC,QAAU,wBAIzD,EAAKE,QAAUjD,EAAOwB,eAItB,EAAK0B,2BAA6B,KAGlC,EAAKC,UAAY,EAGjB,EAAKC,UAAY,KAGjB,EAAKC,cAAgBC,OAAOC,UAC5B,EAAKC,cAAgBF,OAAOG,UAI5B,EAAKC,cAAe,EAGpB,EAAKC,UAAY,IACjB,EAAKC,OAASN,OAAOO,kBAAoBrJ,KAAKsJ,IAAI,EAAG,IAAM,EAI3D,EAAKC,sBAAwB,GAC7B,EAAKC,eAAiB,IAAIC,aAAa,GAGvC,EAAKC,mBAAqB,EAE1B,EAAKC,aAAc,EAEnB,IAAMC,EAAc,GA9DI,OAgExB,EAAKC,QAAU,CACX,CACIpH,GAAIV,EAAUE,QACd6H,IAAK,uBACLC,KAAMH,EACNvE,GAAI,KACJC,IAAK,MAET,CACI7C,GAAIV,EAAUG,MACd4H,IAAK,qBACLC,KAAMH,EACNvE,GAAI,KACJC,IAAK,MAET,CACI7C,GAAIV,EAAUI,KACd2H,IAAK,oBACLC,KAAMH,EACNvE,GAAI,KACJC,IAAK,MAET,CACI7C,GAAIV,EAAUK,QACd0H,IAAK,uBACLC,KAAMH,EACNvE,GAAI,KACJC,IAAK,MAET,CACI7C,GAAIV,EAAUM,OACdyH,IAAK,sBACLC,KAAMH,EACNvE,GAAI,KACJC,IAAK,MAET,CACI7C,GAAIV,EAAUO,OACdwH,IAAK,sBACLC,KAAMH,GACNvE,GAAI,KACJC,IAAK,MAET,CACI7C,GAAIV,EAAUQ,QACduH,IAAK,uBACLC,KAAMH,GACNvE,GAAI,KACJC,IAAK,OAIb,EAAK0E,mBAAqB,KAE1B,EAAKC,WAAa,CACdC,YAAa,GACbC,gBAAiB,GACjBC,cAAe,IAzHK,E,gDAkI5B,WACI,OAAO9K,KAAK+I,iB,IAGhB,SAAmBgC,GACf/K,KAAK+I,gBAAkBgC,EACvB/K,KAAKgL,uB,0BAQT,WACI,OAAOhL,KAAKkJ,iB,IAGhB,SAAmB6B,GACf/K,KAAKkJ,gBAAkB6B,I,sBAI3B,SAASE,GACL,IAAIA,EAAGC,MAAMC,OAIb,GAAKnL,KAAKoL,cAAcH,GAAxB,CAKAjL,KAAKqL,eAAeJ,GACpB,IACIjL,KAAKsL,OAAOL,GADhB,QAIIjL,KAAKuL,aAAaN,SATlBjL,KAAKwL,cAAcP,K,2BAc3B,SAAcA,GACV,IAAIQ,EAAaR,EAAGS,iBAAiBC,eAAe3L,KAAKkJ,iBACrD0C,EAAiB5L,KAAKuK,QAAQsB,OAAM,SAAAC,GAEpC,QADgBb,EAAGS,iBAAiBC,eAAeG,EAAOtB,QAG9D,OACsB,MAAlBxK,KAAKsJ,WACS,MAAdmC,GACAG,I,2BAKR,SAAcX,GACV,IAAI5E,EAAK4E,EAAGc,iBACRL,EAAmBT,EAAGS,iBAErB1L,KAAKsJ,WACNtJ,KAAKgM,gBAGQN,EAAiBC,eAAe3L,KAAKkJ,kBAElDwC,EAAiBO,gBAAgB5F,EAAIrG,KAAKkJ,iBAG9ClJ,KAAKuK,QAAQ2B,SAAQ,SAAAJ,GACDJ,EAAiBC,eAAeG,EAAOtB,MAEnDkB,EAAiBO,gBAAgB5F,EAAIyF,EAAOtB,U,4BAMxD,SAAeS,GACX,IAAI5E,EAAK4E,EAAGc,iBACZd,EAAGkB,mBAAmB/F,GACtBC,EAAG+F,wBAAwB,GAC3B/F,EAAGgG,WAAU,K,oBAIjB,SAAOpB,GACHjL,KAAKsM,mBAAmBrB,GAExBjL,KAAKuM,YAAYtB,GAEbjL,KAAK8I,SACL9I,KAAKwM,UAAUvB,GAGfjL,KAAKqK,aACLrK,KAAKyM,cAAcxB,K,gCAK3B,SAAmBA,GACf,IAAI5E,EAAK4E,EAAGc,iBACRW,EAAUzB,EAAG0B,eAEbC,EAAM3B,EAAG4B,qBAAuB5B,EAAG6B,eAAeD,oBACtD7M,KAAKmJ,QAAQtB,KAAK+E,GAClB5M,KAAKmJ,QAAQ4D,gBAAgB/M,KAAK8J,OAAQ9J,KAAK8J,OAAQ9J,KAAK8J,QAE5D4C,EAAQM,wBAAwB3G,EAAIrG,KAAKmJ,SAKzC,IAAI8D,EAAaxN,EAAYW,kBAAkBJ,KAAKkN,MAAQ,IAAItN,MAChE8M,EAAQS,YAAY9G,EAAI4G,EAAa,W,yBAIzC,SAAYhC,GACR,IAAI5E,EAAK4E,EAAGc,iBACRL,EAAmBT,EAAGS,iBACtBgB,EAAUzB,EAAG0B,eAEZ3M,KAAKoJ,6BACNpJ,KAAKoJ,2BAA6BsC,EAAiB0B,oBAEvD,IAAIC,EAAQ3B,EAAiBC,eAAe3L,KAAKoJ,4BACjD,GAAKiE,EAQDhH,EAAGiH,WAAWjH,EAAGkH,aAAcF,OARvB,CACRA,EAAQhH,EAAGmH,eACX,IAAIC,EAAYzN,KAAK0N,sBACrBhC,EAAiBiC,YAAY3N,KAAKoJ,2BAA4BiE,EAA0B,EAAnBI,EAAUG,QAC/EvH,EAAGiH,WAAWjH,EAAGkH,aAAcF,GAC/BhH,EAAGwH,WAAWxH,EAAGkH,aAAc,IAAIpD,aAAasD,GAAYpH,EAAGyH,aAKnE7C,EAAG8C,gBAAgBC,sBAAsB,GAEzC3H,EAAG4H,oBAAoB,EAAG,EAAG5H,EAAG6H,OAAO,EAAO,EAAG,GAEjDxB,EAAQyB,mBAAmB9H,EAAIrG,KAAKuJ,cAAevJ,KAAK0J,eACxDgD,EAAQ0B,aAAa/H,EAAIqG,EAAQpG,qBAEjCD,EAAGgI,WAAWhI,EAAGiI,OAAQ,EAAGtO,KAAKqJ,a,2BAIrC,SAAc4B,GAAK,IAAD,OACV5E,EAAK4E,EAAGc,iBACRW,EAAUzB,EAAG0B,eACbjB,EAAmBT,EAAGS,iBAErB1L,KAAKoK,qBACNpK,KAAKoK,mBAAqB/D,EAAGkI,aAAalI,EAAGmI,0BAA0B,IAEvExO,KAAK6I,QAAU7I,KAAKoK,oBACpB5K,EAAOiP,IAAIjP,EAAOkP,cAAe,4DAC7B1O,KAAKoK,oBAGbpK,KAAKuK,QAAQ2B,SAAQ,SAAAJ,GAAW,IAAD,EACTrJ,EAAUS,qBAAqB4I,EAAO3I,GAAI,EAAK+J,MAAQ,IAAItN,MAAtEmG,EADoB,EACpBA,GAAIC,EADgB,EAChBA,IACX8F,EAAO/F,GAAKA,EACZ+F,EAAO9F,IAAMA,IACdhG,MAEEA,KAAK0K,qBACN1K,KAAK0K,mBAAqB,IAAIP,aAAmC,EAAtBnK,KAAKuK,QAAQqD,SAG5D,IAAK,IAAI5J,EAAI,EAAGA,EAAIhE,KAAKuK,QAAQqD,OAAQ5J,IAAK,CAC1C,IAAI8H,EAAS9L,KAAKuK,QAAQvG,GAC1BhE,KAAK0K,mBAAuB,EAAJ1G,EAAQ,GAAK8H,EAAO9F,IAC5ChG,KAAK0K,mBAAuB,EAAJ1G,EAAQ,GAAK8H,EAAO/F,GAC5C/F,KAAK0K,mBAAuB,EAAJ1G,EAAQ,GAAKtD,KAAKiO,IAAI7C,EAAOrB,KAAMzK,KAAKoK,oBAChEpK,KAAK0K,mBAAuB,EAAJ1G,EAAQ,GAAK,EAGpChE,KAAK4O,+BACN5O,KAAK4O,6BAA+BlD,EAAiB0B,oBAEzD,IAAIC,EAAQ3B,EAAiBC,eAAe3L,KAAK4O,8BAC5CvB,GAODhH,EAAGiH,WAAWjH,EAAGkH,aAAcF,GAC/BhH,EAAGwI,cAAcxI,EAAGkH,aAAc,EAAGvN,KAAK0K,sBAP1C2C,EAAQhH,EAAGmH,eACX9B,EAAiBiC,YAAY3N,KAAK4O,6BAA8BvB,EAAwC,EAAjCrN,KAAK0K,mBAAmBkD,QAC/FvH,EAAGiH,WAAWjH,EAAGkH,aAAcF,GAC/BhH,EAAGwH,WAAWxH,EAAGkH,aAAcvN,KAAK0K,mBAAoBrE,EAAGyI,eAM/D7D,EAAG8C,gBAAgBC,sBAAsB,GACzC3H,EAAG4H,oBAAoB,EAAG,EAAG5H,EAAG6H,OAAO,EAAO,EAAG,GAEjDxB,EAAQ0B,aAAa/H,EAAIqG,EAAQnG,mBAEjC,IAAK,IAAIvC,EAAI,EAAGA,EAAIhE,KAAKuK,QAAQqD,OAAQ5J,IAAK,CAC1C,IAAI+K,EAAa/O,KAAKuK,QAAQvG,GAAGwG,IACnBS,EAAGS,iBAAiBC,eAAeoD,GACzCC,KAAK/D,GACb5E,EAAGgI,WAAWhI,EAAGiI,OAAQtK,EAAG,M,uBAKpC,SAAUiH,GACN,IAAI5E,EAAK4E,EAAGc,iBACRW,EAAUzB,EAAG0B,eACbjB,EAAmBT,EAAGS,iBAErB1L,KAAKoK,qBACNpK,KAAKoK,mBAAqB/D,EAAGkI,aAAalI,EAAGmI,0BAA0B,IAEvExO,KAAK6I,QAAU7I,KAAKoK,oBACpB5K,EAAOiP,IAAIjP,EAAOkP,cAAe,4DAC7B1O,KAAKoK,oBAGb,IAAI6E,EAAuBxP,EAAYQ,uBAAuBD,KAAKkN,MAAQ,IAAItN,MAE/EI,KAAKkK,eAAe,GAAK+E,EAAqBnO,YAC9Cd,KAAKkK,eAAe,GAAK+E,EAAqBhO,eAC9CjB,KAAKkK,eAAe,GAAKxJ,KAAKiO,IAAI3O,KAAK6I,QAAS7I,KAAKoK,oBACrDpK,KAAKkK,eAAe,GAAK,EAEpBlK,KAAKiK,wBACNjK,KAAKiK,sBAAwByB,EAAiB0B,oBAElD,IAAIC,EAAQ3B,EAAiBC,eAAe3L,KAAKiK,uBAC5CoD,GAODhH,EAAGiH,WAAWjH,EAAGkH,aAAcF,GAC/BhH,EAAGwI,cAAcxI,EAAGkH,aAAc,EAAGvN,KAAKkK,kBAP1CmD,EAAQhH,EAAGmH,eACX9B,EAAiBiC,YAAY3N,KAAKiK,sBAAuBoD,EAAoC,EAA7BrN,KAAKkK,eAAe0D,QACpFvH,EAAGiH,WAAWjH,EAAGkH,aAAcF,GAC/BhH,EAAGwH,WAAWxH,EAAGkH,aAAcvN,KAAKkK,eAAgB7D,EAAGyI,eAM3D7D,EAAG8C,gBAAgBC,sBAAsB,GACzC3H,EAAG4H,oBAAoB,EAAG,EAAG5H,EAAG6H,OAAO,EAAO,EAAG,GAEjDxB,EAAQ0B,aAAa/H,EAAIqG,EAAQnG,mBAEhB0E,EAAGS,iBAAiBC,eAAe3L,KAAKkJ,iBAC9C8F,KAAK/D,GAEhB5E,EAAGgI,WAAWhI,EAAGiI,OAAQ,EAAG,K,0BAIhC,SAAarD,GACT,IAAI5E,EAAK4E,EAAGc,iBACZ1F,EAAGgG,WAAU,GACbhG,EAAG6I,yBAAyB,K,2BAIhC,WACI,IAAIlP,KAAK4J,aAAT,CAIA5J,KAAK4J,cAAe,EACpB,IAAIuF,EAAOnP,KACPoP,EAAM,IAAIC,eAEdD,EAAIE,OAAS,WACT,GAAItP,KAAKuP,QAAU,KAAOvP,KAAKuP,OAAS,IACpC,IACIJ,EAAK7F,UAAYkG,KAAKC,MAAMzP,KAAK0P,UACjCP,EAAKQ,oBAET,MAAOxL,GACH3E,EAAOiP,IAAIjP,EAAOM,aAAc,qDAC5BqE,EAAEyL,iBAIVpQ,EAAOiP,IAAIjP,EAAOM,aAAc,qDAC5BE,KAAKuP,OAAS,IAAMvP,KAAK6P,YAEjCV,EAAKvF,cAAe,GAGxBwF,EAAIU,QAAU,WACVtQ,EAAOiP,IAAIjP,EAAOM,aAAc,4CAChCqP,EAAKvF,cAAe,GAGxBwF,EAAIW,UAAY,WACZvQ,EAAOiP,IAAIjP,EAAOM,aAAc,8CAChCqP,EAAKvF,cAAe,GAGxBwF,EAAIY,KAAK,MAAOhQ,KAAK+I,iBAAiB,GACtCqG,EAAIa,U,iCAIR,WACI,IAAIC,EAAUlQ,KAAKmQ,mBAAmBnQ,KAAKsJ,UAAU8G,UAErD,IAAyB,IAArBF,EAAQG,QACR,MAAM,IAAIC,MACN9Q,EAAOK,WAAWL,EAAOM,aAAc,iBAAkB,sBACrD,mCAEZ,IAA0B,IAAtBoQ,EAAQK,SACR,MAAM,IAAID,MACN9Q,EAAOK,WAAWL,EAAOM,aAAc,iBAAkB,sBACrD,oCAEZ,IAA0B,IAAtBoQ,EAAQM,SACR,MAAM,IAAIF,MACN9Q,EAAOK,WAAWL,EAAOM,aAAc,iBAAkB,sBACrD,qCAGZ,IAAI2Q,EAAOzQ,KAAKsJ,UAAUmH,KACtBhD,EAAY,GAEhBzN,KAAKuJ,cAAgBC,OAAOC,UAC5BzJ,KAAK0J,cAAgBF,OAAOG,UAE5B,IAAK,IAAI3F,EAAI,EAAG0M,EAAMD,EAAK7C,OAAQ5J,EAAI0M,EAAK1M,IAAK,CAC7C,IAAI2M,EAAWF,EAAKzM,GAChBlD,EAAc6P,EAAST,EAAQK,UAC/BtP,EAAiB0P,EAAST,EAAQG,SAClCO,EAAYD,EAAST,EAAQM,UAC7BK,EAAYD,EAAY,EAAI,EAAI,EACpCnD,EAAUqD,KAAKhQ,EAAaG,EAAgB4P,EAAWD,GAEvD5Q,KAAKuJ,cAAgB7I,KAAKiO,IAAI3O,KAAKuJ,cAAeqH,GAClD5Q,KAAK0J,cAAgBhJ,KAAKqQ,IAAI/Q,KAAK0J,cAAekH,GAItD,OAFA5Q,KAAKqJ,UAAY3I,KAAKsQ,MAAMvD,EAAUG,OAAS,GAExCH,I,gCAIX,SAAmB2C,GAIf,IAHA,IAAIC,GAAW,EACXE,GAAY,EACZC,GAAY,EACPxM,EAAI,EAAG0M,EAAMN,EAASxC,OAAQ5J,EAAI0M,EAAK1M,IAAK,CACjD,IAAIiN,EAAeb,EAASpM,GACF,OAAtBiN,EAAaC,OACbb,EAAUrM,GAEY,QAAtBiN,EAAaC,OACbX,EAAWvM,GAEW,SAAtBiN,EAAaC,OACbV,EAAWxM,GAGnB,MAAO,CACHqM,QAASA,EACTE,SAAUA,EACVC,SAAUA,K,gCAKlB,WACIxQ,KAAKsJ,UAAY,KACjBtJ,KAAKoJ,2BAA6B,O,+BAItC,WACI,IAAIjF,EAAIgN,SAASC,YAAY,SAC7BjN,EAAEkN,UAAU5I,GAAmB,GAAM,GACrC6I,OAAOC,cAAcpN,O,GA9fAqE,GCxCvBgJ,EAAelS,IAAUkS,aAC3BC,EAAiBnS,IAAUmS,eCA3BC,GDCepS,IAAUqS,aEDNrS,IAAUmS,eDG7BnS,IAHAoS,cACAxL,EAEA5G,IAFA4G,OA2KW0L,E,kDA7JX,WAAYC,EAAOC,EAAWC,GAAW,IAAD,uBACpC,gBAEKC,WAAaF,EAClB,IAAMG,EAAiB,EAAKxC,MAAMoC,GAJE,OAKpC,EAAKK,KAAKH,EAAUE,GALgB,E,4CAYxC,SAASF,GACL/R,KAAKmS,OAAOJ,SAAWA,I,kBAQ3B,SAAKA,EAAUK,GACX,IADsB,EAgBlBpS,KAAKgS,WANLK,EAVkB,EAUlBA,UACAC,EAXkB,EAWlBA,aACAC,EAZkB,EAYlBA,aACAC,EAbkB,EAalBA,MACAC,EAdkB,EAclBA,UACAC,EAfkB,EAelBA,sBAGEb,EAAQ,IAAIH,EAAaK,EAAUK,GACzCP,EAAMc,KAAO3S,KAAK2S,KAClBd,EAAMe,aAAeH,EAErBZ,EAAMgB,YArBc,CAChB,wBAAyB,0BAA2B,qBACpD,yBAA0B,2BAA4B,sBAEtD,kBAAmB,oBAAqB,WAAY,WAAY,iBAEhE,2BAA4B,WAAY,YAAa,YAAa,cAgBtEhB,EAAMiB,WAAY,EAClBjB,EAAMkB,iBAAkB,EACxBlB,EAAMmB,gBAAkBN,EACxBb,EAAMW,MAAQA,EACdX,EAAMoB,UAAYZ,EAAUa,EAC5BrB,EAAMsB,UAAYd,EAAUe,EAC5BvB,EAAMwB,UAAYhB,EAAUiB,EAC5BzB,EAAM0B,aAAejB,EAAaY,EAClCrB,EAAM2B,aAAelB,EAAac,EAClCvB,EAAM4B,aAAenB,EAAagB,EAClCzB,EAAM6B,KAAOnB,EAAaW,EAC1BrB,EAAM8B,KAAOpB,EAAaa,EAC1BvB,EAAM+B,KAAOrB,EAAae,EAE1BtT,KAAKmS,OAASN,EACdO,EAAY,O,mBAQhB,SAAMyB,GACF,IAAMC,EAASD,EAASC,OAClBC,EAAQF,EAASG,KAAKC,SACtBC,EAAYL,EAASK,UAE3B,IAAK,IAAI3L,KAAOuL,EACZ,GAAIA,EAAOK,eAAe5L,GAGtB,IAFA,IAAM6L,EAAUN,EAAOvL,GAAK6L,QAEnBpQ,EAAI,EAAGA,EAAIoQ,EAAQxG,OAAQ5J,IAAK,CACrC,IAAMqQ,EAAWD,EAAQpQ,GAAGqQ,UAAY,GAClCC,EAAUF,EAAQpQ,GAAGsQ,SAAW,GAChCC,EAAMH,EAAQpQ,GAAGuQ,KAAO,GACxBC,EAAUJ,EAAQpQ,GAAGwQ,SAAW,GAEhCC,EAAY,IAAItK,aAAakK,GAC7BK,EAAW,IAAIvK,aAAamK,GAC5BK,EAAO,IAAIxK,aAAaoK,GACxBK,EAAW,IAAIC,YAAYL,GAEjCJ,EAAQpQ,GAAGqQ,SAAWI,EACtBL,EAAQpQ,GAAGsQ,QAAUI,EACrBN,EAAQpQ,GAAGuQ,IAAMI,EACjBP,EAAQpQ,GAAGwQ,QAAUI,EAKjC,IAAK,IAAI5Q,EAAI,EAAGA,EAAI+P,EAAMnG,OAAQ5J,IAAK,CACnC,IAAM8Q,EAAOf,EAAM/P,GACnB,GAAI8Q,EAAKC,KAAM,CACX,IAAMC,EAAcF,EAAKE,YAAYC,MAAM,GAC3CH,EAAKE,YAAc9O,EAAOwB,eAC1BoN,EAAKE,YAAYnN,KAAKmN,GAElBF,EAAKb,SAASrG,QACdsH,QAAQC,KAAK,oBAAqBL,IAK9C,IAAK,IAAIvM,KAAO2L,EACZ,GAAIA,EAAUC,eAAe5L,GAAM,CAC/B,IAAM6M,EAAWlB,EAAU3L,GAEP,0BAAhB6M,EAASjS,GACLiS,EAASC,aACTD,EAASC,WAAW,GAAK,QACzBD,EAASC,WAAW,GAAK,QACzBD,EAASC,WAAW,GAAK,QACzBD,EAASC,WAAW,GAAK,GAEN,8BAAhBD,EAASjS,IAEO,0BAAhBiS,EAASjS,GADhBiS,EAASE,QAAQ,GAAK,EAGC,oBAAhBF,EAASjS,IAChBiS,EAASG,SAAW,KACpBH,EAASE,QAAQ,GAAK,MACtBF,EAASE,QAAQ,GAAK,MACtBF,EAASE,QAAQ,GAAK,OACC,6BAAhBF,EAASjS,GAChBiS,EAASG,SAASF,WAAWG,MAAQ,SACd,iBAAhBJ,EAASjS,GAChBiS,EAASG,SAASF,WAAWG,MAAQ,SACd,0BAAhBJ,EAASjS,GAChBiS,EAASG,SAASF,WAAWG,MAAQ,SACd,8BAAhBJ,EAASjS,GAChBiS,EAASG,SAASF,WAAWG,MAAQ,SACd,0BAAhBJ,EAASjS,KAChBiS,EAASG,SAASF,WAAWG,MAAQ,UAKjD,OAAO3B,I,oBAMX,SAAO5I,GACCjL,KAAKmS,QAAWnS,KAAKyV,SAIzBzV,KAAKmS,OAAOuD,OAAOzK,O,GArKvB3L,IADAqW,YEqBAC,EAEAtW,IAFAsW,SAIEC,EAAc,IAAIC,EAFpBxW,IADAwW,iBAGoC,SACxCC,MAAM,4BAA4BC,MAAK,SAAAtG,GACnC,OAAOA,EAASuG,UACjBD,MAAK,SAAAE,GACJL,EAAYM,cAAc,IAAIC,EAAeF,EAAe,CACxD7D,UAAW,CACPa,EAAG,EACHE,EAAG,EACHE,EAAG,EACH+C,YAAa,CAAC,EAAG,EAAG,GACpBC,YAAa,GACbC,gBAAiB,GAErBhE,aAAc,CACVW,EAAG,EACHE,EAAG,EACHE,EAAG,GAEPd,MAAO,IACPF,aAAc,CACVY,GAAI,GACJE,GAAI,GACJE,EAAG,GAEPZ,uBAAuB,GACxB,IAAIkD,EAAS,GAAI,GAAI,UAEbC,QCvDFW,EAAW,CACpB,CACIC,QAAS,gCACTC,WAAY,mBACZC,MAAO,mBACPC,UAAW,GACXC,OAAQ,YACRpM,KAAM,IACNqM,OAAQxX,IAAUyX,OAAOC,YACzBC,eAAgB,IAAI3X,IAAU4X,SAAS,GAAI,KAE/C,CACIT,QAAS,oCACTC,WAAY,mBACZC,MAAO,uBACPC,UAAW,GACXC,OAAQ,YACRpM,KAAM,IACNqM,OAAQxX,IAAUyX,OAAOC,YACzBC,eAAgB,IAAI3X,IAAU4X,SAAS,GAAI,KAE/C,CACIT,QAAS,oCACTC,WAAY,MACZC,MAAO,MACPC,UAAW,GACXC,OAAQ,YACRpM,KAAM,IACNqM,OAAQxX,IAAUyX,OAAOC,YACzBC,eAAgB,IAAI3X,IAAU4X,SAAS,GAAI,KAE/C,CACIT,QAAS,oCACTC,WAAY,gBACZC,MAAO,gBACPC,UAAW,GACXC,OAAQ,YACRpM,KAAM,IACNqM,OAAQxX,IAAUyX,OAAOC,YACzBC,eAAgB,IAAI3X,IAAU4X,SAAS,GAAI,KAE/C,CACIT,QAAS,gCACTC,WAAY,UACZC,MAAO,UACPC,UAAW,GACXC,OAAQ,YACRpM,KAAM,IACNqM,OAAQxX,IAAUyX,OAAOC,YACzBC,eAAgB,IAAI3X,IAAU4X,SAAS,GAAI,MAGtCC,EAAW,CAEpB,CACIV,QAAS,gCACTC,WAAY,cACZC,MAAO,cACPC,UAAW,GACXC,OAAQ,YACRpM,KAAM,IACNqM,OAAQxX,IAAUyX,OAAOC,YACzBC,eAAgB,IAAI3X,IAAU4X,SAAS,GAAI,KAE/C,CACIT,QAAS,gCACTC,WAAY,iBACZC,MAAO,iBACPC,UAAW,GACXC,OAAQ,YACRpM,KAAM,IACNqM,OAAQxX,IAAUyX,OAAOC,YACzBC,eAAgB,IAAI3X,IAAU4X,SAAS,GAAI,MClC5C,SAASE,EAAT,GAAyF,IAAvEjU,EAAsE,EAAtEA,GAAIkU,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,KAAMC,EAAsD,EAAtDA,IAAKC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAI9EC,EAAMC,iBAAO,MAJwE,EAKvDC,mBAAS,MAL8C,mBAKxEC,GALwE,aAOrED,mBAAS,IAP4D,gCAQjDA,mBAAS,KARwC,mBAQpFE,EARoF,KAQrEC,EARqE,OAS7CH,mBAAS,IAToC,gCAU3DA,mBAAS,CAACtW,SAAU6V,EAAM/V,UAAW8V,EAAMc,SAAUZ,EAAKa,IAAI,GAAIC,YAAa,MAVpB,mBAUpFC,EAVoF,KAU1EC,EAV0E,KAWrFC,EAAWV,iBAAOF,GAClBa,EAAUX,iBAAO,GACjBY,EAAUZ,iBAAO,GACHA,iBAAO,GACNA,iBAAO,GAI5B,SAASa,IACL,IAAMC,EAAMf,EAAIgB,QACZC,EAAmBF,EAAIG,UAAUC,SAAW,GAUhDC,YATmB,SAAfC,IACIxY,KAAK8D,IAAIoU,EAAIG,UAAUC,SAAWtY,KAAK8D,IAAIsU,IAC3CF,EAAIG,UAAUC,SAAWF,EACzBG,WAAWC,EAAc,KAEzBN,EAAIG,UAAUC,QAAU,EAE5BJ,EAAIO,WAEiB,IAI7B,SAASC,EAAiBC,GACtBnE,QAAQzG,IAAI,qBAAqB4K,GACjCC,EAAe,cAAc7D,QAAkB,MAAP4D,EAAaA,GAAMC,EAAe,cAAc7D,QAGxFoC,EAAIgB,QAAQM,SAUhB,SAASI,EAAgBF,GACrBnE,QAAQzG,IAAI,oBAAoB4K,GAChCC,EAAe,aAAa7D,QAAkB,MAAP4D,EAAaA,GAAMC,EAAe,aAAa7D,QACtFoC,EAAIgB,QAAQM,SAIhB,SAASK,EAAYH,GACjBnE,QAAQzG,IAAI,gBAAgB4K,GAC5BC,EAAe,kBAAkB7D,QAAkB,MAAP4D,EAAaA,GAAMC,EAAe,kBAAkB7D,QAChGoC,EAAIgB,QAAQM,SAQhB,SAASM,IACL5B,EAAIgB,QAAQa,OAAOjB,EAAQI,SAASpD,SAAQ,EAE5CgD,EAAQI,SAAWJ,EAAQI,QAAU,GAAGrC,EAAS5I,OACjDsH,QAAQzG,IAAI,qBAAqBoJ,EAAIgB,QAAQa,OAAOjB,EAAQI,SAASc,aACrE9B,EAAIgB,QAAQa,OAAOjB,EAAQI,SAASpD,SAAQ,EAC5CoC,EAAIgB,QAAQM,SAYhB,SAASS,EAAUhC,GAEf,IAAIiC,EADJ3E,QAAQzG,IAAI,mBAAqBmJ,GAE7BY,EAASK,SAaT3D,QAAQzG,IAAI,yBACZoL,EAAiB,IAAIva,IAAUwa,sBAb/B5E,QAAQzG,IAAI,gCACZoL,EAAiB,IAAIva,IAAUya,gBAChBC,YAAY,IAAI1a,IAAU2a,uBAAuB,CAC5DC,eAAgB5a,IAAUyX,OAAOC,YACjCmD,WAAY,iBACZC,qBAAsB,aACtBC,cAAe,KACfC,aAAc,KACdC,WAAY,IAAIjb,IAAUkb,kBAAkB,wCAAyC,SAAU,aAOvG3C,EAAIgB,QAAQ3N,MAAM2O,eAAiBA,EACnChC,EAAIgB,QAAQM,SACZX,EAASK,SAAWL,EAASK,QAmLjC,SAASS,EAAepI,GACpB,IAAK,IAAIlN,EAAI,EAAGA,EAAI6T,EAAIgB,QAAQa,OAAO9L,OAAQ5J,IAE3C,GAAI6T,EAAIgB,QAAQa,OAAO1V,GAAG2V,cAAgBzI,EAAM,OAAO2G,EAAIgB,QAAQa,OAAO1V,GAE9E,OAAO,KAnSgF,SAsS5EyW,EAtS4E,8EAsS3F,WAAiCvN,GAAjC,uBAAAhJ,EAAA,sDAEI,IADiB,MACRF,EAAI,EAAGA,EAAI6T,EAAIgB,QAAQa,OAAO9L,OAAQ5J,IAAK,CAChD,GAAI6T,EAAIgB,QAAQa,OAAO1V,GAAG2V,YAAYe,SAAS,aAE3C,IAASC,EAAI,EAAGA,EAAI9C,EAAIgB,QAAQa,OAAO1V,GAAG4W,YAAYhN,OAAQ+M,IACtDE,EAAahD,EAAIgB,QAAQa,OAAO1V,GAAG4W,YAAYD,GACvC,GAARzN,GACI4N,EAAuB,IAAIlb,KAAKib,EAAWE,eAAeC,iBAAiBC,uBAAuB,GAAGC,qBAAqBC,sBAAuBC,UACjJC,EAAsB,IAAIzb,KAAKib,EAAWE,eAAeC,iBAAiBC,uBAAuB,GAAGC,qBAAqBI,qBAAsBF,UACnJP,EAAWpF,QAAWqF,GAAuB5N,EAAKqO,MAAgBF,GAAsBnO,EAAKqO,MAE7FV,EAAWpF,SAAU,EAI7BoC,EAAIgB,QAAQa,OAAO1V,GAAG2V,YAhBlC,4CAtS2F,sBA8X1F,SAAS6B,EAAOlE,EAAMD,EAAME,GACzB0B,YAAW,WACPpB,EAAIgB,QAAQ4C,aAAaC,WAAa,IACtC7D,EAAIgB,QAAQ8C,KAAK,IAAIrc,IAAUsW,SAAS0B,EAAMD,EAAME,IACpDM,EAAIgB,QAAQM,WACT,KAmCX,IAAMyC,EAAiB,WAEnB,IAAIC,EAAKhE,EAAIgB,QAAQE,UAAU+C,eAAeva,UAC1Cwa,EAAKlE,EAAIgB,QAAQE,UAAU+C,eAAera,SAC1Cua,EAAKnE,EAAIgB,QAAQE,UAAUkD,MAC3BC,EAAMF,EAAK,IA3TnB,WACI,IAKIG,EASAC,EAdAC,EAAOxE,EAAIgB,QAAQyD,SAEnBC,EAAU,GAId,KACIJ,EAAMtE,EAAIgB,QAAQ2D,YAAY3E,EAAIgB,QAAQ4D,kBAAkBJ,EAAKnJ,EAAGmJ,EAAKjJ,EAAIiJ,EAAKK,SAASC,gBAAgB5K,UACxGtQ,SAAWf,KAAKkc,MAAoB,IAAdT,EAAG1a,UAAkB,IAC9C0a,EAAG5a,UAAYb,KAAKkc,MAAqB,IAAfT,EAAG5a,WAAmB,IAEpD,MAAMsb,GAAMV,EAAK,KAIjB,KACIC,EAAKvE,EAAIgB,QAAQ2D,YAAY3E,EAAIgB,QAAQ4D,kBAAkBJ,EAAKnJ,EAAImJ,EAAKS,MAAOT,EAAKjJ,IAAIuJ,gBAAgB5K,UACtGtQ,SAAWf,KAAKkc,MAAoB,IAAdR,EAAG3a,UAAkB,IAC9C2a,EAAG7a,UAAYb,KAAKkc,MAAqB,IAAfR,EAAG7a,WAAmB,IAEpD,MAAMsb,GAAMT,EAAK,KAuBjB,OApBS,MAAND,GAAoB,MAANC,EAEXG,EAAU,IAKGJ,EAAG5a,UACF4a,EAAG1a,SACJ2a,EAAG7a,UACH6a,EAAG3a,SAGhB8a,EAAU,YACNJ,EAAG5a,UAAY,IAAM4a,EAAG1a,SAAW,IACnC2a,EAAG7a,UAAY,IAAM4a,EAAG1a,SAAW,IACnC2a,EAAG7a,UAAY,IAAM6a,EAAG3a,SAAW,IACnC0a,EAAG5a,UAAY,IAAM6a,EAAG3a,SAAW,IACnC0a,EAAG5a,UAAY,IAAM4a,EAAG1a,SAAW,MAEtC8a,EA+QgBQ,GAAiB,GAExCxE,GAAY,SAACD,GAAe,OAAO,2BAAIA,GAAX,IAAqB/W,UAAUsa,EAAIpa,SAAUsa,EAAI5D,SAAU6D,EAAIgB,YAAad,QAgDtGe,EAAqB,SAACC,GACxBhI,QAAQzG,IAAI,gBACZkK,KA+JN,OAlIEwE,qBAAU,WACNjI,QAAQzG,IAAI,yBAGZ,IAAIoL,EAAiB,IAAIva,IAAUya,eACnCF,EAAeuD,qBACfvD,EAAeG,YAAY,IAAI1a,IAAU2a,uBAAuB,CAC5DC,eAAgB5a,IAAUyX,OAAOC,YACjCmD,WAAY,iBACZC,qBAAsB,aACtBC,cAAe,KACfC,aAAc,KACdC,WAAY,IAAIjb,IAAUkb,kBAAkB,wCAAyC,SAAU,YAKnG3C,EAAIgB,QAAU,IAAIvZ,IAAU+d,YAAYla,GACxC0U,EAAIgB,QAAQyE,gBAAgBxM,KAAK8K,GAGjCtc,IAAUie,2BAA2BC,UAAUC,YAAc,WACzD5F,EAAIgB,QAAQE,UAAUkD,MAAQ3c,IAAUoe,OAAOC,MAAM9F,EAAIgB,QAAQE,UAAUkD,MAAO,IAAM,MAK5F,IAAI2B,EAA2B,IAAIte,IAAUue,gBAAgBhG,EAAIgB,QAASoE,GAC1EW,EAAyBE,eAAiB,EAC1CF,EAAyBG,iBAAmB,IAC5ClG,EAAIgB,QAAQmF,sBAAsBC,oBAAoBC,4BAA4BN,GAUlF,IAAIO,EAAyB,IAAI7e,IAAU8e,cAAcvG,EAAIgB,QAASoE,GACtEkB,EAAuBE,aAAe,EACtCF,EAAuBjN,KAAO,aAC9B2G,EAAIgB,QAAQmF,sBAAsBM,kBAAkBJ,4BAA4BC,GAShF7e,IAAU0J,cAAcC,QAAU3J,IAAU0J,cAAcC,QAAQgM,MAAM,GAAG,GAsB3E,IAlBA,IAAIsJ,EAAiB,IAAI7V,EACrB8V,EAAkB,IAAIlf,IAAUmf,gBAAgB,qCAKhDC,EAAiB,IAAIpf,IAAUwW,gBAAgB,cAE/C4D,EAAS,CAIT,CAAEiF,MAAOJ,EAAgB9I,QAAS+B,GAClC,CAAEmH,MAAOH,EAAiB/I,QAASgC,GACnC,CAAEkH,MAAOD,EAAgBjJ,SAAS,GAClC,CAAEkJ,MAAO9I,EAAaJ,SAAS,IAG1BmJ,EAAI,EAAGA,EAAIpI,EAAS5I,OAAQgR,IAAK,CACtC,IAAID,EAAQ,IAAIrf,IAAUuf,SAASrI,EAASoI,GAAI,IAChDD,EAAMlJ,SAAU,EAChBoC,EAAIgB,QAAQiG,SAASH,EAAO,IAEhC,IAAK,IAAIC,EAAI,EAAGA,EAAIzH,EAASvJ,OAAQgR,IAAK,CACtC,IAAID,EAAQ,IAAIrf,IAAUuf,SAAS1H,EAASyH,GAAI,IAChDD,EAAMlJ,SAAU,EAChBoC,EAAIgB,QAAQiG,SAASH,EAAO,IAGhC,IAAK,IAAIC,EAAI,EAAGA,EAAIlF,EAAO9L,OAAQgR,IAC/BlF,EAAOkF,GAAGD,MAAMlJ,QAAUiE,EAAOkF,GAAGnJ,QACpCoC,EAAIgB,QAAQiG,SAASpF,EAAOkF,GAAGD,OAEnCzJ,QAAQzG,IAAIoJ,EAAIgB,QAAQa,QAExB6E,EAAerR,KAAO,IAAItN,KAC1B4e,EAAgBtR,KAAO,IAAItN,KAC3B4b,EAAOlE,EAAMD,EAAME,GAOnBM,EAAIgB,QAAQM,SACZtB,EAAIgB,QAAQkG,aAAc,IAE3B,IAOH5B,qBAAU,WACN1D,MACD,CAAC/B,IAEJyF,qBAAU,WACN3D,EAAY7B,KACb,CAACA,IAEJwF,qBAAU,WACN/D,EAAiB3B,KAClB,CAACA,IAEJ0F,qBAAU,WACN5D,EAAgB/B,KACjB,CAACA,IAEJ2F,qBAAU,WACNvD,EAAUhC,KACX,CAACA,IAEC,CAAEU,WAAUkD,SAAQwD,cA1ZzB,WACI,IAAI,IAAIhb,EAAE,EAAEA,EAAEiU,EAAcrK,OAAO5J,IACjC6T,EAAIgB,QAAQoG,YAAYhH,EAAcjU,IAIxCkU,GAAiB,SAACD,GAAD,MAAiB,MAElCJ,EAAIgB,QAAQM,UAkZwB+F,WA9drB,SAAC1U,EAAI2U,GAyDpB,IAAIC,EAAkB,IAAI9f,IAAUwW,gBAAgB,aAAatL,EAAI6U,WAAWC,QAAQ5e,KAAK6e,KAAqB,IAAhB7e,KAAK8e,WAEvG3H,EAAIgB,QAAQiG,SAASM,GAIP,IAAI9f,IAAUmgB,cAAcjV,GAClCkV,MAfR,WACIxK,QAAQzG,IAAI2Q,GACZlH,GAAiB,SAACD,GAAD,4BAAqBA,GAArB,CAAmCmH,OACpD3E,EAAkB0E,GAClBtH,EAAIgB,QAAQM,YAjDhB,SAAoCwG,EAAUN,GAC1C,IAAIrW,EAAgB,GACpBA,EAAc+R,eAAiBsE,EAE/B,IAAIO,EAAsB,IAAItgB,IAAUugB,oBAAoB,MAqC5D,OApCAD,EAAoBE,WAAa,GACjCF,EAAoBG,WAAa,IAAIzgB,IAAU6G,MAAM,EAAG,EAAG,EAAG,IAC9DyZ,EAAoBI,gBAAgBC,OAAS,IAAI3gB,IAAU4gB,OACvD5gB,IAAU6gB,gBAAiB,EAC3B7gB,IAAU6gB,gBAAiB,GAI3BR,EAASS,eAAiBT,EAASU,mBACnCrX,EAAcsX,WAAa,IAAIhhB,IAAUugB,oBAAoBD,GAEtDD,EAASY,oBAAsBZ,EAASa,yBAC/CxX,EAAcsX,WAAWG,aAAc,EACvCzX,EAAcsX,WAAWI,aAAe,IAAIphB,IAAU6G,MAClD,GAAM6C,EAAcsX,WAAWK,cAAcC,IAC7C,GAAM5X,EAAcsX,WAAWK,cAAcE,MAC7C,GAAM7X,EAAcsX,WAAWK,cAAcG,KAC7C,GAEJ9X,EAAcsX,WAAWS,aAAe,IACjCpB,EAASqB,iBAAmBrB,EAASsB,wBAC5CjY,EAAcsX,WAAa,IAAIhhB,IAAU4hB,gBAAgB,MACzDlY,EAAcsX,WAAWK,cAAgB,IAAIrhB,IAAU6G,MAAM,EAAG,EAAG,EAAG,IACtE6C,EAAcsX,WAAWI,aAAe,IAAIphB,IAAU6G,MAAM,EAAG,EAAG,EAAG,IAErE6C,EAAcmY,oBAAsB,IAAI7hB,IAAU4hB,gBAAgBlY,EAAcsX,YAChFtX,EAAcmY,oBAAoBT,aAAe,IAAIphB,IAAU6G,MAAM,EAAG,EAAG,EAAG,IAC9E6C,EAAcmY,oBAAoBR,cAAgB,IAAIrhB,IAAU6G,MAAM,EAAG,EAAG,EAAG,IAS5E6C,IAmBoDoW,IA8ZfgC,OA/YpD,aA+Y4D7H,kBAAiBH,mBAAkBiI,QAtQ/F,SAAiBlC,GACb7F,EAAe,aAAapM,KAAOoM,EAAe,cAAcpM,KAAO,IAAItN,KAAKuf,GAChF1E,EAAkB0E,GAClBtH,EAAIgB,QAAQM,UAmQwFmI,iBAvPxG,WACItJ,GAAe,SAAAuJ,GACbrM,QAAQzG,IAAI,mBAAmB8S,GAC/B,IAAIC,EAAuB,CAAE,KAAM,kBAAmB,YAClDC,GAAWD,EAAqBE,QAAQH,GAAY,GAAGC,EAAqB5T,OAEhF,OADAsH,QAAQzG,IAAI,kBAAkB+S,EAAqBC,IAC3CD,EAAqBC,IAC3B,IAAK,KACD5J,EAAIgB,QAAQ3N,MAAMyW,WAAa,IAAIriB,IAAUsiB,gBAC7C,MACJ,IAAK,kBACD/J,EAAIgB,QAAQ3N,MAAMyW,WAAa,IAAIriB,IAAUuiB,0BAC7C,MACJ,IAAK,WACDhK,EAAIgB,QAAQ3N,MAAMyW,WAAa,IAAIriB,IAAUwiB,mBAC7C,MACJ,IAAK,cACDjK,EAAIgB,QAAQ3N,MAAMyW,WAAa,IAAIriB,IAAUyiB,2BAA2B,SACxE,MACJ,IAAK,cACDlK,EAAIgB,QAAQ3N,MAAMyW,WAAa,IAAIriB,IAAUyiB,2BAA2B,SACxE,MACJ,QACAlK,EAAIgB,QAAQ3N,MAAMyW,WAAa,IAAIriB,IAAUsiB,gBAG/C,OADA/J,EAAIgB,QAAQM,SACLqI,EAAqBC,OA6NwFjI,cAAawI,YAnlBvI,SAAqB3I,GACjBnE,QAAQzG,IAAI,gBAAgB4K,GAC5BC,EAAe,SAAS7D,QAAkB,MAAP4D,EAAaA,GAAMC,EAAe,SAAS7D,QAC9EoC,EAAIgB,QAAQM,UAglBoIM,WAAUwI,SAljB9J,WACIpK,EAAIgB,QAAQa,OAAOhB,EAAQG,QAAQrC,EAAS5I,QAAQ6H,SAAQ,EAE5DiD,EAAQG,SAAWH,EAAQG,QAAU,GAAG1B,EAASvJ,OACjDsH,QAAQzG,IAAI,kBAAkBoJ,EAAIgB,QAAQa,OAAOhB,EAAQG,QAAQrC,EAAS5I,QAAQ+L,aAClF9B,EAAIgB,QAAQa,OAAOhB,EAAQG,QAAQrC,EAAS5I,QAAQ6H,SAAQ,EAC5DoC,EAAIgB,QAAQM,UA4iBwJS,YAAWjB,W,kBC/kBxKuJ,MA7Ef,YAAmD,IAAlCC,EAAiC,EAAjCA,SAAUhf,EAAuB,EAAvBA,GAAImU,EAAmB,EAAnBA,KAAMD,EAAa,EAAbA,KAAME,EAAO,EAAPA,IAAO,EAER6K,oBAAU,eAFF,mBAEvCC,EAFuC,KAE1BC,EAF0B,OAIlBvK,mBAASsK,GAJS,mBAIvCE,EAJuC,KAI/BC,EAJ+B,OAmB1CpL,EAAO,CACPjU,GAAIA,EACJmU,KAAMA,EACND,KAAMA,EACNE,IAAKA,EACLC,UAAW6K,EAAY7K,UACvBC,WAAY4K,EAAY5K,WACxBC,WAAY2K,EAAY3K,WACxBC,MAAO0K,EAAY1K,MACnBC,IAAKyK,EAAYzK,MAjBjBoH,GAX0C,EAQ1C1G,SAR0C,EAS1CkD,OAT0C,EAU1C0D,WAV0C,EAW1CF,eAEAsC,GAb0C,EAY1CF,OAZ0C,EAa1CE,kBACAW,EAd0C,EAc1CA,SACAD,EAf0C,EAe1CA,YACAX,EAhB0C,EAgB1CA,QAEA1I,GAlB0C,EAiB1CiB,UAjB0C,EAkB1CjB,SAsDJ,OAzCA8J,YAAW,IAAInB,GACfmB,YAAW,IAAIzD,GACfyD,YAAW,IAAI9J,GACf8J,YAAW,KAAI,kBAAMD,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB7K,WAAWhX,KAAK8e,iBACtEiD,YAAW,IAAIT,GACfS,YAAW,KAAI,kBAAMD,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB3K,KAAK2K,EAAO3K,YAClE6K,YAAW,IAAIR,GACfQ,YAAW,KAAI,kBAAMD,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB9K,YAAY8K,EAAO9K,mBACzEgL,YAAW,KAAI,kBAAMD,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB/K,WAAW+K,EAAO/K,kBACxEiL,YAAW,KAAI,kBAAMD,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB5K,OAAO4K,EAAO5K,cAWpEwF,qBAAU,WACNkE,EAAQc,EAAS/G,aACnB,CAAC+G,IAEHhF,qBAAU,WACNmF,EAAeC,KAChB,CAACA,IAEJpF,qBAAU,WACNqF,EAAUH,KACX,CAACA,IAYI,wBAAQlf,GAAIA,EAAIuf,MATP,CACbhL,WAAY,QACZ3F,SAAU,QACV4Q,KAAM,EACN7F,MAAO,OACPJ,OAAQ,W,wBC9DDkG,OAbf,YAAiD,IAA7BjjB,EAA4B,EAA5BA,KAAMkjB,EAAsB,EAAtBA,UAEtB,OAF4C,EAAXC,SAG7B,sBAAKC,UAAU,iBAAf,UACI,oBAAIA,UAAwB,SAAbF,EAAoB,cAAc,GAAjD,SAAsDljB,EAAKgC,mBAD/D,IAEI,oBAAIohB,UAAwB,UAAbF,EAAqB,cAAc,GAAlD,SAAuDG,IAAWrjB,EAAK,WAAWsjB,gBAFtF,IAGI,oBAAIF,UAAwB,QAAbF,EAAmB,cAAc,GAAhD,SAAqDG,IAAWrjB,EAAK,YAHzE,YAII,oBAAIojB,UAAwB,SAAbF,EAAoB,cAAc,GAAjD,SAAsDG,IAAWrjB,EAAK,YAJ1E,IAKI,oBAAIojB,UAAwB,WAAbF,EAAsB,cAAc,GAAnD,SAAwDG,IAAWrjB,EAAK,YAL5E,IAMI,oBAAIojB,UAAwB,WAAbF,EAAsB,cAAc,GAAnD,SAAwDG,IAAWrjB,EAAK,gBCV7E,SAASujB,GAAT,GAA4C,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SAAY,EAKtBrL,mBAASqL,GALa,mBAKvCzjB,EALuC,KAKjC0jB,EALiC,KASxCC,EAAUxL,mBACVyL,EAAOzL,mBACP0L,EAAc1L,mBACpB0L,EAAY3K,QAAU,IAGtB,IAAM4K,EAAQ3L,mBAGR4L,EAAc5L,mBACd6L,EAAa7L,mBAwCnB,SAAS8L,IACL1O,QAAQzG,IAAI,eACR8U,EAAK1K,UAAS0K,EAAK1K,QAAU2K,EAAY3K,SACxCyK,EAAQzK,UACT6K,EAAY7K,QAAUgL,aAAa,WAC/BJ,EAAM5K,SAAW0K,EAAK1K,QACtBwK,EAAQ,IAAIzjB,KAAK6jB,EAAM5K,YACzB2K,EAAY3K,UAElByK,EAAQzK,SAAU,EA0CxB,OAnBEsE,qBAAU,WACNjI,QAAQzG,IAAI,uBAAuB2U,EAASU,UAC5CL,EAAM5K,QAAUuK,EAAShI,YAC1B,CAACgI,IAKJjG,qBAAU,WACNjI,QAAQzG,IAAI,mBAEZgV,EAAM5K,SAAU,IAAIjZ,MAAOwb,UACvB+H,GACAS,MAGL,CAACT,IAGC,CAAExjB,OAAM2jB,UAASS,YA3DtB,WACQT,EAAQzK,QAmBhB,WACI3D,QAAQzG,IAAI,cACTkV,EAAW9K,SAASmL,aAAaL,EAAW9K,SAC3C6K,EAAY7K,SAASoL,cAAcP,EAAY7K,SACnDyK,EAAQzK,SAAU,EAtBdqL,GAEAN,KAuD2BO,MA/BnC,WACIV,EAAM5K,SAAU,IAAIjZ,MAAOwb,UAC3BiI,EAAQ,IAAIzjB,KAAK6jB,EAAM5K,WA6BeuL,cA1E1C,WAEIb,EAAK1K,QAAW0K,EAAK1K,QAAU,EAAI0K,EAAK1K,SAAW,EAAE0K,EAAK1K,SAAW,EAClEnY,KAAK8D,IAAI+e,EAAK1K,SAAW2K,EAAY3K,UAAS0K,EAAK1K,QAAU2K,EAAY3K,SAC5E3D,QAAQzG,IAAI,SAAS8U,EAAK1K,UAsE2BwL,cAlEzD,WACId,EAAK1K,QAAW0K,EAAK1K,QAAU,EAAI0K,EAAK1K,SAAW,EAAE0K,EAAK1K,SAAW,EAClEnY,KAAK8D,IAAI+e,EAAK1K,SAAW2K,EAAY3K,UAAS0K,EAAK1K,SAAW,EAAI2K,EAAY3K,SACjF3D,QAAQzG,IAAI,SAAS8U,EAAK1K,UA+D0CyL,UAxBxE,SAAmBC,GACfrP,QAAQzG,IAAI,uBAAuB8V,EAAQT,UAC3CL,EAAM5K,QAAU0L,EAAQnJ,Y,OC5BjBoJ,OAxDf,YAAoD,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,aAAe,EAW3CxB,GAAS,CACTC,WAAW,EACXC,SAAUqB,IATV9kB,EAJ2C,EAI3CA,KAEAokB,EAN2C,EAM3CA,YACAI,EAP2C,EAO3CA,MACAC,EAR2C,EAQ3CA,cACAC,EAT2C,EAS3CA,cASJ5B,YAAW,IAAIsB,GACftB,YAAW,KAAI,WAAK0B,OACpB1B,YAAW,IAAI2B,GACf3B,YAAW,IAAI4B,GAKflH,qBAAU,WAENuH,EAAa/kB,KAGf,CAACA,IA/B4C,MAwCjBoY,qBAxCiB,mBAwCxC4M,EAxCwC,KAwC/BC,EAxC+B,KAoD/C,OACI,qBAAK7B,UAAU,iBAAiB8B,QAZZ,WACpB,IAAMC,EAAMllB,KAAKklB,MACbH,GAAYG,EAAMH,EAAW,IAC/BR,KAEES,EAAWE,GACXf,S,kCCmLGgB,OArOf,YAAuD,IAA3BplB,EAA0B,EAA1BA,KAAMqlB,EAAoB,EAApBA,WAAazB,EAAO,EAAPA,KAErC/Q,EAAQsF,mBAFoC,EAGpBC,mBAAS,GAHW,mBAG3CkN,EAH2C,aAItBlN,oBAAS,IAJa,gCAKhBA,mBAAS,KALO,mBAK3CmN,EAL2C,KAKhCC,EALgC,KA+NlD,OAtNAhI,qBAAU,WACN,OAAO,gBA0LXiI,2BAAgB,WAEZD,EAzLc,SAACE,EAAQC,GAEvB,GAAI9S,EAAMqG,QAAV,CA8BA,IA5BA,IAoBI/W,EAAKF,EAAO2jB,EAAM7jB,EApBhB8jB,EAAY,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAoBzDC,EAAS,EACjCC,EAAS,EACTC,EAAY,EACZC,EAAW,EACXC,EAAW,EACXC,EAAa,EACbC,EAAO,GAED/hB,EAAE,EAAIA,EAAIwO,EAAMqG,QAAQmN,aAAehiB,GAAG,EAAI,CACpD,IAAIiiB,EAAU,IAAIrmB,MAAOoE,EAAGwO,EAAMqG,QAAQmN,aAAa,GAAKV,EAAQD,EAAOjK,WAO3E,OANAtZ,EAAMmkB,EAAQlkB,aACdH,EAAQqkB,EAAQpkB,cAChB0jB,EAAOU,EAAQhkB,cACfP,EAAOukB,EAAQtkB,iBACf8jB,EAASQ,EAAQ/jB,iBAET,GACJ,KAAKojB,EA5BK,IA6BHG,IAAWK,IACK,IAAXL,GAAyB,IAATF,EAChBQ,EAAKjV,KAAK,CAACoV,MAAM,UAAWC,IAAKniB,EAAGoiB,MAAOC,EAAId,EAAK,GAAG,IAAIc,EAAIZ,EAAO,KAEvD,IAAXA,GAAyB,IAATF,IAChBQ,EAAKjV,KAAK,CAACoV,MAAM,WAAYC,IAAKniB,EAAGoiB,MAAOtkB,IAC5CikB,EAAKjV,KAAK,CAACoV,MAAM,cAAeC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,OAKzE,MAEA,KAAK0jB,EA3CO,IA4CLG,IAAWK,IACM,IAAXL,GAAuB,GAAPF,GAAaE,EAAS,KAAO,EAG/B,IAAXA,GAAyB,IAATF,IAChBQ,EAAKjV,KAAK,CAACoV,MAAM,WAAYC,IAAKniB,EAAGoiB,MAAOtkB,IAC5CikB,EAAKjV,KAAK,CAACoV,MAAM,cAAeC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,MAJ7DmkB,EAAKjV,KAAK,CAACoV,MAAM,UAAWC,IAAKniB,EAAGoiB,MAAOC,EAAId,EAAK,GAAG,IAAIc,EAAIZ,EAAO,MASlF,MAEA,KAAKH,EA1DM,KA2DJC,IAASM,IACK,IAATN,EACAQ,EAAKjV,KAAK,CAACoV,MAAM,UAAWC,IAAKniB,EAAGoiB,MAAOC,EAAId,EAAK,GAAG,SAGvDQ,EAAKjV,KAAK,CAACoV,MAAM,WAAYC,IAAKniB,EAAGoiB,MAAOtkB,IAC5CikB,EAAKjV,KAAK,CAACoV,MAAM,cAAeC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,OAIrE,MAEA,KAAK0jB,EAxEO,KAyELC,IAASM,IACK,IAATN,GAAgBA,EAAO,IAAM,EAC7BQ,EAAKjV,KAAK,CAACoV,MAAM,UAAWC,IAAKniB,EAAGoiB,MAAOC,EAAId,EAAK,GAAG,QAE1C,IAATA,IACAQ,EAAKjV,KAAK,CAACoV,MAAM,WAAYC,IAAKniB,EAAGoiB,MAAOtkB,IAC5CikB,EAAKjV,KAAK,CAACoV,MAAM,cAAeC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,OAKzE,MAEA,KAAK0jB,EAvFK,KAwFHxjB,IAAQ4jB,IACM,IAAR5jB,EACDikB,EAAKjV,KAAK,CAACoV,MAAM,SAAUC,IAAKniB,EAAGoiB,MAAOtkB,KAE1CikB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,KAC1C,IAAVA,GAAamkB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAO1kB,MAK3E,MAEA,KAAK4jB,EArGM,MAsGJxjB,IAAQ4jB,IACM,IAAR5jB,GAAqB,KAARA,GAAcA,EAAM,IAAM,EACxCikB,EAAKjV,KAAK,CAACoV,MAAM,SAAUC,IAAKniB,EAAGoiB,MAAOtkB,IAE/B,GAAPA,IAEAikB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,KAC1C,IAAVA,GAAamkB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAO1kB,MAO/E,MAEA,KAAK4jB,EAvHO,OAwHJ1jB,IAAU+jB,IACI,IAAV/jB,EACAmkB,EAAKjV,KAAK,CAACoV,MAAM,WAAYC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,MAEtDmkB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,KACxDmkB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAO1kB,MAI1D,MAEA,KAAK4jB,EApIQ,OAqIL1jB,IAAU+jB,IACI,IAAV/jB,GAAyB,KAAVA,GAAiBA,EAAS,IAAM,EAC/CmkB,EAAKjV,KAAK,CAACoV,MAAM,WAAYC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,KAEzC,GAATA,IACAmkB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,KACxDmkB,EAAKjV,KAAK,CAACoV,MAAM,aAAcC,IAAKniB,EAAGoiB,MAAO1kB,MAK9D,MAEA,KAAK4jB,EAnJM,OAoJJ5jB,IAASkkB,IACM,IAAVhkB,EACAmkB,EAAKjV,KAAK,CAACoV,MAAM,WAAYC,IAAKniB,EAAGoiB,MAAOZ,EAAU5jB,KAGtDmkB,EAAKjV,KAAK,CAACoV,MAAM,UAAWC,IAAKniB,EAAGoiB,MAAO1kB,KAS3DgkB,EAAU5jB,EACV8jB,EAAWlkB,EACXikB,EAAY/jB,EACZikB,EAAWN,EACXO,EAAaL,EAGjB,OAAOM,EAAKO,KAAI,SAAAC,GAAI,OAAM,cAAC,KAASC,IAAV,CAAczD,UAAWwD,EAAKL,MAAiCxD,MAAO,CAAC+D,IAAIF,EAAKJ,IAAIlB,QAAQA,GAA5F,SAAuGsB,EAAKH,OAAlEG,EAAKL,MAAMK,EAAKJ,QA/JpF,SAASE,EAAIK,EAAQ9Y,GAEjB,IADA,IAAI+Y,EAAM,GAAKD,EACRC,EAAI/Y,OAASA,GAChB+Y,EAAM,IAAMA,EAEhB,OAAOA,GAqKEC,CAAUjnB,EAAKqlB,MAC9B,CAAEA,EAAWrlB,IAGfwd,qBAAU,WAENjI,QAAQzG,IAAI,oBAAoB8U,KAelC,CAACA,IAKC,cAAC,KAASiD,IAAV,CAAcK,IAAKrU,EAAOuQ,UAAU,oBAApC,SACKmC,KCgBE4B,OA5Of,YAAmF,IAA5DrC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,aAAcqC,EAAkC,EAAlCA,kBAAmBC,EAAe,EAAfA,aAEzDC,EAAU,OAEVC,EAAU,KAGVC,EAAWrP,mBACXsP,EAAWtP,mBACXuP,EAAUvP,mBACZsP,EAASvO,UAASuO,EAASvO,QAAUqO,GACrCG,EAAQxO,UAASwO,EAAQxO,QAAU,GAXuC,MAc3Cd,mBAAS0M,GAdkC,mBAcvE6C,EAduE,KAc5DC,EAd4D,OAiBlCxP,mBAAS0M,GAjByB,mBAiBvE+C,EAjBuE,KAiBxDC,EAjBwD,OAmBjD1P,oBAAS,GAnBwC,mBAmBvE2P,EAnBuE,KAmB/DC,EAnB+D,OAoBrD5P,mBAAS,KApB4C,mBAoBvEwL,EApBuE,KAoBjEqE,EApBiE,OAqB3C7P,mBAAS,QArBkC,mBAqBvE8P,EArBuE,KAqB5DC,EArB4D,OAwBzC/P,mBAASmP,GAxBgC,mBAwBvElC,EAxBuE,KAwB3D+C,EAxB2D,KAyBzEX,EAASvO,UAASuO,EAASvO,QAAUqO,GAG1C,IAAMvC,EAAU7M,mBACVkQ,EAAYlQ,mBAGZmQ,EAAkB,WACpB,IAAMnD,EAAMllB,KAAKklB,MACbH,EAAQ9L,SAAYiM,EAAMH,EAAQ9L,QAAW,MAAS6O,EACtDM,EAAUnP,SAAU,GAEpB8L,EAAQ9L,QAAUiM,EAClBkD,EAAUnP,SAAU,IAtCkD,EA2C1CqP,cAAU,iBAAO,CAAEC,WAAY,CAAC,EAAE,OA3CQ,mBA2CrEA,EA3CqE,KA2CrEA,WAAaC,EA3CwD,OA4CrDF,cAAU,iBAAO,CAAEG,IAAK,CAAC,EAAE,OA5C0B,mBA4CrEA,EA5CqE,KA4CrEA,IAAOC,EA5C8D,OA6CxCJ,cAAU,iBAAO,CAACK,WAAY,MA7CU,mBA6CrEA,EA7CqE,KA6CrEA,WAAcC,EA7CuD,KAkDxExZ,EAAOyZ,aAAW,CAEpBC,UAAW,WACHtB,EAASvO,QAAUmM,GAG3B2D,QAAS,YAA8F,EAA3FC,MAA4F,IAArFC,EAAoF,EAApFA,MAAOC,EAA6E,EAA7EA,KAA+BC,GAA8C,EAAvEC,UAAuE,EAA5DC,SAA4D,EAAlDC,GAAkD,EAA9CH,UAA8C,IAApCI,YAAoC,MAA7BZ,EAAWa,WAAkB,EA6BvG,OA1BIZ,EAAY,CACRD,WAAYQ,EAAS,GAAK1B,EAAQxO,QAClCwQ,WAAW,EACXC,OAAQ,GACRC,QAAS,WAEL,IAAKV,EAAO,CAER,IAAItE,EAAU,IAAI3kB,KAAK4nB,EAAcpM,UAAY1a,KAAK6e,KAAKwJ,EAAS,GAAK/D,EAAczB,GAAQA,GAC/FgE,EAAahD,GACbG,EAAaH,GAEb8C,EAAQxO,QAAU0P,EAAWa,YAIrCI,OAAQ,WACJ,IAAKV,EAAM,CACPnB,GAAU,GACV,IAAIpD,EAAU,IAAI3kB,KAAK4nB,EAAcpM,UAAY1a,KAAK6e,KAAKgJ,EAAWa,WAAapE,EAAczB,GAAQA,GACzGwD,EAAkBxC,GAClBkD,EAAkBlD,GAClB8C,EAAQxO,QAAQ,MAIzBsQ,GAGPM,OAAQ,YAKF,EALMC,MAKL,IAECC,EAPWjC,EAKb,EALaA,OAAQmB,EAKrB,EALqBA,MAAOC,EAK5B,EAL4BA,KAAeF,GAK3C,EALkCgB,QAKlC,EAL2ChB,OAAOK,EAKlD,EALkDA,SAAUD,EAK5D,EAL4DA,UAAWa,EAKvE,EALuEA,SAAcd,GAKrF,EALiFG,GAKjF,EALqFH,UAKrF,IAL+Fe,YAK/F,MALsG,CACxGC,SAAU/E,EACVgF,UAAW,CAAC,EAAE,GACdC,YAAajF,GAEX,EAWF,OARI6D,IACAlB,GAAU,GACVM,IACAR,EAAkBH,GAClBD,EAAQxO,QAAU,GAIlBmP,EAAUnP,SAAWgR,IACrBF,EAAOG,EAAKG,YAAcH,EAAKG,YAAc,GAAMrB,EAAM,IApGrD,GAFA,MAuGgBe,EAvGhB,KAwGAA,EAAO1C,IAAS0C,EAAO1C,GAC3Bc,EAAc4B,GAEdG,EAAKG,YAAcN,EACnBG,EAAKE,UAAYpB,EACbE,GAAMnB,GAAU,GACbmC,IAEXb,EAAYvoB,KAAK8D,IAAIykB,GAAU,GAAI,EAAEA,EAErCb,EAAW,CACPD,WAAaY,EACbM,UAAY3B,EACZ4B,OAAQ,CAAEL,SAAUzW,iBAAMwW,EAAWC,GAAWiB,OAAO,GACvDX,QAAS,WAEL,IAAKV,EAAO,CACR,IAAItE,EAAU,IAAI3kB,KAAK4nB,EAAcpM,UAAY1a,KAAK6e,KAAK4I,EAAWiB,WAAW,GAAKpE,EAAczB,GAAQA,GAC5GgE,EAAahD,GACbG,EAAaH,KAKrBiF,OAAQ,WACJ,IAAKV,EAAM,CACPnB,GAAU,GACV,IAAIpD,EAAU,IAAI3kB,KAAK4nB,EAAcpM,UAAY1a,KAAK6e,KAAK4I,EAAWiB,WAAW,GAAKpE,EAAczB,GAAQA,GAC5GwD,EAAkBxC,GAClBkD,EAAkBlD,OAIvBuF,KAGf,CAAC3F,OAAO,EAAKgG,KAAM,CAACC,UAAU,KA4E9B,OA/CAjN,qBAAU,WAEFuK,GA3BW,SAACjD,GAChB,IAAKiD,EAAQ,CACT,IAAI2C,EAAc,CAAC,GAAG7C,EAAcpM,UAAYqJ,EAAUrJ,WAAc4J,GAExEsD,EAAM,CACFD,IAAKgC,EACLhB,WAAW,EACXC,OAAQ,CAACnF,OAAO,EAAMmF,OAAQ,CAACgB,SAAU,MACzCf,QAAS,WACL,IAAIhF,EAAU,IAAI3kB,KAAK4nB,EAAcpM,UAAYiN,EAAIe,WAAW,GAAKpE,GACrEuC,EAAahD,GACbG,EAAaH,IAEjBiF,OAAQ,WAEJ,IAAIjF,EAAU,IAAI3kB,KAAK4nB,EAAcpM,UAAYiN,EAAIe,WAAW,GAAKpE,GACrEqD,EAAIkC,SAAS,CAAC,EAAE,IAChBhD,EAAahD,GACbkD,EAAkBlD,OAU1BiG,CAAW/F,KAEjB,CAACA,IAMHtH,qBAAU,WACNjI,QAAQzG,IAAI,oBAAoBiZ,KAClC,CAACA,IAGHvK,qBAAU,WACN6J,EAAaa,KACf,CAACA,IAEH1K,qBAAU,WACN,QAAQ,GACJ,KAAK6H,EAAa,UACd4C,EAAQ,QACRE,EAAa,SACb,MACJ,KAAK9C,EAAa,SACd4C,EAAQ,OACRE,EAAa,OACb,MACJ,KAAK9C,EAAa,OACd4C,EAAQ,MACRE,EAAa,QACb,MACJ,KAAK9C,EAAa,MACd4C,EAAQ,KACRE,EAAa,UACb,MACJ,QACIF,EAAQ,KACRE,EAAa,aAEvB,CAAC9C,IAMC,cAAC,KAASwB,IAAV,CAAczD,UAAU,eAAe8D,IAAKM,EAA5C,SACI,sBAAKpE,UAAU,OAAf,UACI,+CAAS/T,KAAT,IAAiB+T,UAAU,YAA3B,gBAEA,cAAC,GAAD,CAAmBA,UAAU,QAAQpjB,KAAM2nB,EAAWtC,WAAYA,EAAYzB,KAAMA,IAEpF,qBAAKR,UAAU,oBAAf,SACI,qBAAKrG,OAAO,KAAKI,MAAM,KAAKiG,UAAU,WAAtC,SACI,yBAAS0H,OAAO,+BCtLzBC,OAjDf,YAA8E,IAAxDjG,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,aAAcqC,EAA8B,EAA9BA,kBAAmBjE,EAAW,EAAXA,SAAW,EAEvB/K,mBAAS0M,GAFc,mBAElEkG,EAFkE,KAE/CC,EAF+C,OAGnB7S,mBAAS0M,GAHU,mBAGlEoG,EAHkE,KAG7CC,EAH6C,OAIvC/S,mBAAS0M,GAJ8B,mBAIlEsG,EAJkE,KAIvDC,EAJuD,OAKtBjT,mBAAS,GALa,mBAKlEkT,EALkE,KAK/CC,EAL+C,KAsCzE,OACI,gCACE,cAAC,GAAD,CAAgBzG,UAAWoG,EAAqBnG,aApBnB,SAAC/kB,GAEhCirB,EAAqBjrB,MAmBnB,cAAC,GAAD,CAAWA,KAAMorB,EAAWjI,SAAUA,EAAUD,UAAWoI,IAC3D,cAAC,GAAD,CAAcxG,UAAWkG,EACnBjG,aApCqB,SAAC/kB,GAE9BqrB,EAAarrB,GACb+kB,EAAa/kB,IAkCLonB,kBA9B0B,SAACpnB,GAEnCmrB,EAAuBnrB,GACvBonB,EAAkBpnB,IA4BVqnB,aAnBqB,SAACzD,GAC9BrO,QAAQzG,IAAI,2BAA6B8U,GACzC2H,EAAsB3H,U,OCef4H,OAtCf,SAAsBC,GAAQ,IAAD,EAEDrT,oBAAS,GAFR,mBAElB/H,EAFkB,KAEZqb,EAFY,OAIJnD,cAAU,iBAAM,CAAEoD,IAAM,QAJpB,mBAIhBA,EAJgB,KAIhBA,GAAKC,EAJW,KAKnBvc,EAAOyZ,aAAY,CACrBgB,OAAQ,YAA4B,IAAzBX,EAAwB,EAAxBA,KAAMF,EAAkB,EAAlBA,MAAkB,EAAX4C,KACZ,GAAG,IAAO1C,GAAQF,EAAM,GAAK,KACjC2C,EAAI,CACAD,IAAK,MAETD,GAAS,KAETE,EAAI,CACAD,GAAIxC,GAAMpoB,KAAKqQ,IAAI6X,EAAM,GAAG,GAAG,IAEnCyC,GAAS,OAMrB,OAEI,eAAC,KAAS7E,IAAV,2BAAkBxX,KAAlB,IAA0B0T,MAAO,CAAE+I,MAAOH,EAAI7E,IAAI,GAAK1D,UAAU,eAAjE,UACI,8BACI,qBAAK5f,GAAG,OAAM4f,UAAU,OAAO2I,IAAI,wBAAwBnU,IAAI,GAAGsN,QAAS,kBAAyB0G,EAApBvb,EAAwB,CAACsb,GAAG,GAAnB,CAACA,IAAI,WAGjGF,EAAMnX,c,OCFJ0X,OA9Bf,YAA6D,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,gBAAkB,EAG1B9T,mBAAS6T,GAHiB,mBAGjDE,EAHiD,KAGxCC,EAHwC,KAkBxD,OAbAtJ,YAAW,KAAI,WAAKsJ,EAAW,SAC/BtJ,YAAW,KAAI,WAAKsJ,EAAW,SAC/BtJ,YAAW,KAAI,WAAKsJ,EAAW,SAC/BtJ,YAAW,KAAI,WAAKsJ,EAAW,UAC/BtJ,YAAW,KAAI,WAAKsJ,EAAW,cAE/B5O,qBAAU,WACNjI,QAAQzG,IAAI,uBAAwBqd,GACpCD,EAAgBC,KACjB,CAACA,IAKA,sBAAK/I,UAAU,kBAAf,UACI,qBAAKA,UAAuB,MAAX+I,EAAiB,uBAAuB,eAAzD,SAAyE,qBAAK/I,UAAU,cAAc2I,IAAI,wBAAwBnU,IAAI,GAAGsN,QAAS,kBAAMkH,EAAW,WACnK,qBAAKhJ,UAAuB,MAAX+I,EAAiB,uBAAuB,eAAzD,SAAyE,qBAAK/I,UAAU,cAAc2I,IAAI,wBAAwBnU,IAAI,GAAGsN,QAAS,kBAAMkH,EAAW,WACnK,qBAAKhJ,UAAuB,MAAX+I,EAAiB,uBAAuB,eAAzD,SAAyE,qBAAK/I,UAAU,cAAc2I,IAAI,wBAAwBnU,IAAI,GAAGsN,QAAS,kBAAMkH,EAAW,WACnK,qBAAKhJ,UAAuB,OAAX+I,EAAkB,uBAAuB,eAA1D,SAA0E,qBAAK/I,UAAU,cAAc2I,IAAI,yBAAyBnU,IAAI,GAAGsN,QAAS,kBAAMkH,EAAW,gBClBlKC,OATf,WAA8B,IAAD,EAEK5J,oBAAU,WAFf,mBAElB0J,EAFkB,KAETC,EAFS,KAIzB,OACI,cAAC,GAAD,CAAiBH,eAAgBE,EAASD,gBAAiBE,K,OC+BpDE,OAjCf,YAA0D,IAApC5J,EAAmC,EAAnCA,YAAa6J,EAAsB,EAAtBA,oBAAsB,EAGzBnU,mBAASsK,GAHgB,mBAG9CE,EAH8C,KAGtCC,EAHsC,KAsBrD,OAXArF,qBAAU,WACN+O,EAAoB3J,KACrB,CAACA,IAEJpF,qBAAU,WACNqF,EAAUH,KACX,CAACA,IAMA,sBAAKU,UAAU,cAAf,UACI,qBAAKA,UAAYV,EAAY5K,WAAY,uBAAuB,eAAhE,SAAgF,qBAAKsL,UAAU,UAAUoJ,UAAU,QAAQT,IAAI,0BAA0BnU,IAAI,GAAGsN,QAnB/I,kBAAMrC,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB9K,YAAY8K,EAAO9K,qBAoB3E,qBAAKsL,UAAYV,EAAY7K,UAAW,uBAAuB,eAA/D,SAA+E,qBAAKuL,UAAU,UAAUoJ,UAAU,QAAQT,IAAI,yBAAyBnU,IAAI,GAAGsN,QAnB9I,kBAAMrC,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB/K,WAAW+K,EAAO/K,oBAoBzE,qBAAKuL,UAAYV,EAAY1K,MAAO,uBAAuB,eAA3D,SAA2E,qBAAKoL,UAAU,UAAUoJ,UAAU,QAAQT,IAAI,qBAAqBnU,IAAI,GAAGsN,QAnB1I,kBAAMrC,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB5K,OAAO4K,EAAO5K,gBAoBjE,qBAAKoL,UAAU,eAAf,SAA8B,qBAAKA,UAAU,UAAUoJ,UAAU,QAAQT,IAAI,qBAAqBnU,IAAI,GAAGsN,QAnBhG,kBAAMrC,GAAU,SAACD,GAAD,mBAAC,eAAcA,GAAf,IAAuB7K,WAAWhX,KAAK8e,uBCE7D4M,OAbf,WAAyB,MAMiBhK,oBAAU,eAN3B,mBAMdC,EANc,KAMDC,EANC,KAQrB,OACI,cAAC,GAAD,CAAaD,YAAaA,EAAa6J,oBAAqB5J,K,iBCkBrD+J,OAvBf,WAA+B,IAAD,EAGQjK,oBAAU,YAHlB,mBAGlBkK,EAHkB,KAe1B,OAf0B,KAgBtB,qBAAKvJ,UAAU,gBAAf,SACI,cAAC,KAAD,CAAWxb,MAAO+kB,EAAUC,iBARP,SAAChlB,GAC1B4J,SAASqb,gBAAgB9J,MAAM+J,YAAY,UAAWllB,EAAMmlB,W,SC6FrDC,OA9Ff,WAEI,IAAIvJ,EAAW,IAAIxjB,KAFR,EAGqBmY,mBAASqL,GAH9B,mBAGJjB,EAHI,KAGMyK,EAHN,OAIW7U,mBAASqL,GAAxBqB,EAJI,sBAKuB1M,oBAAS,GALhC,mBAKJ8U,EALI,KAQLC,GARK,KAQIC,gBARJ,EAUW3K,oBAAU,WAAxB0J,EAVG,sBAWc1J,oBAAU,eAA3BC,EAXG,sBAYWD,oBAAU,YAAxB4K,EAZG,sBAuCyBjV,oBAAS,GAvClC,mBAuCJkV,EAvCI,KAmEX,OAnEW,KAyCXxK,YAAW,IAAIqK,EAAOI,OAEtB/P,qBAAU,WACNjI,QAAQzG,IAAI,0BAA0Bwe,KAExC,CAACA,IAGH9P,qBAAU,WACNjI,QAAQzG,IAAI,sBACZyG,QAAQzG,IAAI4T,KAEd,IAEFlF,qBAAU,WACNjI,QAAQzG,IAAI,sBACZyG,QAAQzG,IAAI4T,KAEd,CAACA,IAEHlF,qBAAU,WACNjI,QAAQzG,IAAI,mBACZyG,QAAQzG,IAAIue,KAEd,CAACA,IAGC,qBAAKjK,UAAU,MAAf,SACK,eAAC,KAAD,CAAY+J,OAAQA,EAApB,UACG,qBAAK/J,UAAU,QAAf,SACI,cAAC,EAAD,CAAO5f,GAAG,QACNgf,SAAUA,EACV3K,UAAW6K,EAAY7K,UACvBC,WAAY4K,EAAY5K,WACxBE,MAAO0K,EAAY1K,MACnBD,WAAY2K,EAAY3K,WACxBL,KAAK,MACLC,KAAK,SAGb,cAAC,GAAD,CAAamN,UAAWA,EAAWC,aAnE5B,SAACH,GAEhBqI,EAAYrI,IAiEyDwC,kBA9DjD,SAACpnB,GACrBuV,QAAQzG,IAAI,eAAiB9O,EAAKmkB,WA6DuEhB,SAAU+J,IAC3G,eAAC,GAAD,CAAcnF,OAAO,OAArB,UACI,qBAAKxB,MAAM,OAAX,SAAkB,qBAAMwF,IAAI,mCAAmChP,OAAO,SACtE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEJ,qBAAKqG,UAAU,eAAf,SAA+B+I,UC7FhCqB,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrX,MAAK,YAAkD,IAA/CsX,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHVlY,QAAQzG,IAAI,iBAAiB,IAAI7O,MAAQwb,WAazCuS,oBAAU,CACN7B,QAAS,KACTkB,SAAU,UACV3K,YAAa,CACT5K,YAAY,EACZD,WAAW,EACXG,OAAO,EACPD,WAAY,EACZE,KAAK,KChBjBgW,IAASlY,OACP,cAAC,IAAMmY,WAAP,UACE,cAAC,GAAD,MAEF1c,SAAS2c,eAAe,SAM1BX,M","file":"static/js/main.88eb3ff7.chunk.js","sourcesContent":["/*\n * Copyright 2015-2017 WorldWind Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport WorldWind from 'webworldwind-esa';\nconst {\n    Angle,\n    ArgumentError,\n    Logger\n} = WorldWind;\n\n/**\n * Provides utilities for determining the Sun geographic and celestial location.\n * @exports SunPosition\n */\nconst SunPosition = {\n\n    /**\n     * Computes the geographic location of the sun for a given date\n     * @param {Date} date\n     * @throws {ArgumentError} if the date is missing\n     * @return {{latitude: Number, longitude: Number}} the geographic location\n     */\n    getAsGeographicLocation: function (date) {\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"getAsGeographicLocation\",\n                    \"missingDate\"));\n        }\n\n        let celestialLocation = this.getAsCelestialLocation(date);\n        return this.celestialToGeographic(celestialLocation, date);\n    },\n\n    /**\n     * Computes the celestial location of the sun for a given julianDate\n     * @param {Date} date\n     * @throws {ArgumentError} if the date is missing\n     * @return {{declination: Number, rightAscension: Number}} the celestial location\n     */\n    getAsCelestialLocation: function (date) {\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"getAsCelestialLocation\",\n                    \"missingDate\"));\n        }\n\n        let julianDate = this.computeJulianDate(date);\n\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        let numDays = julianDate - 2451545;\n\n        let meanLongitude = this.normalizeAngle360(280.460 + 0.9856474 * numDays);\n\n        let meanAnomaly = this.normalizeAngle360(357.528 + 0.9856003 * numDays) * Angle.DEGREES_TO_RADIANS;\n\n        let eclipticLongitude = meanLongitude + 1.915 * Math.sin(meanAnomaly) + 0.02 * Math.sin(2 * meanAnomaly);\n        let eclipticLongitudeRad = eclipticLongitude * Angle.DEGREES_TO_RADIANS;\n\n        let obliquityOfTheEcliptic = (23.439 - 0.0000004 * numDays) * Angle.DEGREES_TO_RADIANS;\n\n        let declination = Math.asin(Math.sin(obliquityOfTheEcliptic) * Math.sin(eclipticLongitudeRad)) *\n            Angle.RADIANS_TO_DEGREES;\n\n        let rightAscension = Math.atan(Math.cos(obliquityOfTheEcliptic) * Math.tan(eclipticLongitudeRad)) *\n            Angle.RADIANS_TO_DEGREES;\n\n        //compensate for atan result\n        if (eclipticLongitude >= 90 && eclipticLongitude < 270) {\n            rightAscension += 180;\n        }\n        rightAscension = this.normalizeAngle360(rightAscension);\n\n        return {\n            declination: declination,\n            rightAscension: rightAscension\n        };\n    },\n\n    /**\n     * Converts from celestial coordinates (declination and right ascension) to geographic coordinates\n     * (latitude, longitude) for a given julian date\n     * @param {{declination: Number, rightAscension: Number}} celestialLocation\n     * @param {Date} date\n     * @throws {ArgumentError} if celestialLocation or julianDate are missing\n     * @return {{latitude: Number, longitude: Number}} the geographic location\n     */\n    celestialToGeographic: function (celestialLocation, date) {\n        if (!celestialLocation) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"celestialToGeographic\",\n                    \"missingCelestialLocation\"));\n        }\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"celestialToGeographic\", \"missingDate\"));\n        }\n\n        let julianDate = this.computeJulianDate(date);\n\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        let numDays = julianDate - 2451545;\n\n        //Greenwich Mean Sidereal Time\n        let GMST = this.normalizeAngle360(280.46061837 + 360.98564736629 * numDays);\n\n        //Greenwich Hour Angle\n        let GHA = this.normalizeAngle360(GMST - celestialLocation.rightAscension);\n\n        let longitude = Angle.normalizedDegreesLongitude(-GHA);\n\n        return {\n            latitude: celestialLocation.declination,\n            longitude: longitude\n        };\n    },\n\n    /**\n     * Computes the julian date from a javascript date object\n     * @param {Date} date\n     * @throws {ArgumentError} if the date is missing\n     * @return {Number} the julian date\n     */\n    computeJulianDate: function (date) {\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"computeJulianDate\", \"missingDate\"));\n        }\n\n        let year = date.getUTCFullYear();\n        let month = date.getUTCMonth() + 1;\n        let day = date.getUTCDate();\n        let hour = date.getUTCHours();\n        let minute = date.getUTCMinutes();\n        let second = date.getUTCSeconds();\n\n        let dayFraction = (hour + minute / 60 + second / 3600) / 24;\n\n        if (month <= 2) {\n            year -= 1;\n            month += 12;\n        }\n\n        let A = Math.trunc(year / 100);\n        let B = 2 - A + Math.trunc(A / 4);\n        let JD0h = Math.trunc(365.25 * (year + 4716)) + Math.trunc(30.6001 * (month + 1)) + day + B - 1524.5;\n\n        return JD0h + dayFraction;\n    },\n\n    /**\n     * Restricts an angle to the range [0, 360] degrees, wrapping angles outside the range.\n     * Wrapping takes place as though traversing the edge of a unit circle;\n     * angles less than 0 wrap back to 360, while angles greater than 360 wrap back to 0.\n     *\n     * @param {Number} degrees the angle to wrap in degrees\n     *\n     * @return {Number} the specified angle wrapped to [0, 360] degrees\n     */\n    normalizeAngle360: function(degrees) {\n        let angle = degrees % 360;\n        return angle >= 0 ? angle : (angle < 0 ? 360 + angle : 360 - angle);\n    }\n\n};\n\nexport default SunPosition;","import WorldWind from 'webworldwind-esa';\nimport SunPosition from './SunPosition';\nconst {\n    Angle\n} = WorldWind;\n\nconst Celestial = {\n\n    SUN: 0,\n    MERCURY: 1,\n    VENUS: 2,\n    MARS: 4,\n    JUPITER: 5,\n    SATURN: 6,\n    URANUS: 7,\n    NEPTUNE: 8,\n\n    getCelestialLocation(id, date) {\n        let orbitalElements;\n        const julianDate = SunPosition.computeJulianDate(date);\n        let d = julianDate - 2451543.5;\n        //d = -3543.0;\n\n        switch (id) {\n            case this.SUN:\n                orbitalElements = this.computeSun(d);\n                break;\n\n            case this.MERCURY:\n                orbitalElements = this.computeMercury(d);\n                break;\n\n            case this.VENUS:\n                orbitalElements = this.computeVenus(d);\n                break;\n\n            case this.MARS:\n                orbitalElements = this.computeMars(d);\n                break;\n\n            case this.JUPITER:\n                orbitalElements = this.computeJupiter(d);\n                break;\n\n            case this.SATURN:\n                orbitalElements = this.computeSaturn(d);\n                break;\n\n            case this.URANUS:\n                orbitalElements = this.computeUranus(d);\n                break;\n\n            case this.NEPTUNE:\n                orbitalElements = this.computeNeptune(d);\n                break;\n        }\n\n        return this.computePosition(d, orbitalElements);\n    },\n\n    computeMercury(d) {\n        const N = 48.3313 + 3.24587E-5 * d;\n        const i = 7.0047 + 5.00E-8 * d;\n        const w = 29.1241 + 1.01444E-5 * d;\n        const a = 0.387098;  //(AU)\n        const e = 0.205635 + 5.59E-10 * d;\n        const M = 168.6562 + 4.0923344368 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeVenus(d) {\n        const N = 76.6799 + 2.46590E-5 * d;\n        const i = 3.3946 + 2.75E-8 * d;\n        const w = 54.8910 + 1.38374E-5 * d;\n        const a = 0.723330;//  (AU)\n        const e = 0.006773 - 1.302E-9 * d;\n        const M = 48.0052 + 1.6021302244 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeMars(d) {\n        const N = 49.5574 + 2.11081E-5 * d;\n        const i = 1.8497 - 1.78E-8 * d;\n        const w = 286.5016 + 2.92961E-5 * d;\n        const a = 1.523688;  //(AU)\n        const e = 0.093405 + 2.516E-9 * d;\n        const M = 18.6021 + 0.5240207766 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeJupiter(d) {\n        const N = 100.4542 + 2.76854E-5 * d;\n        const i = 1.3030 - 1.557E-7 * d;\n        const w = 273.8777 + 1.64505E-5 * d;\n        const a = 5.20256;  //(AU)\n        const e = 0.048498 + 4.469E-9 * d;\n        const M = 19.8950 + 0.0830853001 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeSaturn(d) {\n        const N = 113.6634 + 2.38980E-5 * d;\n        const i = 2.4886 - 1.081E-7 * d;\n        const w = 339.3939 + 2.97661E-5 * d;\n        const a = 9.55475;  //(AU)\n        const e = 0.055546 - 9.499E-9 * d;\n        const M = 316.9670 + 0.0334442282 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeUranus(d) {\n        const N = 74.0005 + 1.3978E-5 * d;\n        const i = 0.7733 + 1.9E-8 * d;\n        const w = 96.6612 + 3.0565E-5 * d;\n        const a = 19.18171 - 1.55E-8 * d;//  (AU)\n        const e = 0.047318 + 7.45E-9 * d;\n        const M = 142.5905 + 0.011725806 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeNeptune(d) {\n        const N = 131.7806 + 3.0173E-5 * d;\n        const i = 1.7700 - 2.55E-7 * d;\n        const w = 272.8461 - 6.027E-6 * d;\n        const a = 30.05826 + 3.313E-8 * d;//  (AU)\n        const e = 0.008606 + 2.15E-9 * d;\n        const M = 260.2471 + 0.005995147 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeSun(d) {\n        const N = 0.0;\n        const i = 0.0;\n        const w = 282.9404 + 4.70935E-5 * d;\n        const a = 1.000000;  //(AU)\n        const e = 0.016709 - 1.151E-9 * d;\n        const M = 356.0470 + 0.9856002585 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computePosition(d, {N, i, w, a, e, M}) {\n        N = SunPosition.normalizeAngle360(N) * Angle.DEGREES_TO_RADIANS;\n        i = SunPosition.normalizeAngle360(i) * Angle.DEGREES_TO_RADIANS;\n        w = SunPosition.normalizeAngle360(w) * Angle.DEGREES_TO_RADIANS;\n        //e = SunPosition.normalizeAngle360(e) * Angle.DEGREES_TO_RADIANS;\n        M = SunPosition.normalizeAngle360(M) * Angle.DEGREES_TO_RADIANS;\n\n        let E = M + e * Math.sin(M) * (1.0 + e * Math.cos(M));\n\n        if (e >= 0.06) {\n            for (var aa = 0; aa < 10; aa++) {\n                var E1 = E - (E - e * Math.sin(E) - M) / (1 - e * Math.cos(E));\n                if (Math.abs(E1 - E) < 0.001) {\n                    E = E1;\n                    break;\n                }\n                E = E1;\n            }\n        }\n\n        const xv = a * (Math.cos(E) - e);\n        const yv = a * (Math.sqrt(1.0 - e * e) * Math.sin(E));\n\n        const v = Math.atan2(yv, xv);\n        const r = Math.sqrt(xv * xv + yv * yv);\n\n        let xh = r * (Math.cos(N) * Math.cos(v + w) - Math.sin(N) * Math.sin(v + w) * Math.cos(i));\n        let yh = r * (Math.sin(N) * Math.cos(v + w) + Math.cos(N) * Math.sin(v + w) * Math.cos(i));\n        let zh = r * (Math.sin(v + w) * Math.sin(i));\n\n        const Epoch = 2000.0;\n        const lon_corr = 3.82394E-5 * (365.2422 * (Epoch - 2000.0) - d) * Angle.DEGREES_TO_RADIANS;\n\n        const lonecl = Math.atan2(yh, xh) + lon_corr;\n        const latecl = Math.atan2(zh, Math.sqrt(xh * xh + yh * yh));\n\n\n        /*** perturbations ***/\n        /*** not implemented ***/\n\n\n        xh = r * Math.cos(lonecl) * Math.cos(latecl);\n        yh = r * Math.sin(lonecl) * Math.cos(latecl);\n        zh = r * Math.sin(latecl);\n\n        let {lonsun, rsun} = this.getLonSun(d, this.computeSun(d));\n        lonsun *= Angle.RADIANS_TO_DEGREES;\n        lonsun = SunPosition.normalizeAngle360(lonsun) * Angle.DEGREES_TO_RADIANS;\n\n        const xs = rsun * Math.cos(lonsun);\n        const ys = rsun * Math.sin(lonsun);\n\n        const xg = xh + xs;\n        const yg = yh + ys;\n        const zg = zh;\n\n        const ecl = SunPosition.normalizeAngle360(23.4393 - 3.563E-7 * d) * Angle.DEGREES_TO_RADIANS;\n\n        const xe = xg;\n        const ye = yg * Math.cos(ecl) - zg * Math.sin(ecl);\n        const ze = yg * Math.sin(ecl) + zg * Math.cos(ecl);\n\n        const ra = SunPosition.normalizeAngle360(Math.atan2(ye, xe) * Angle.RADIANS_TO_DEGREES);\n        const dec = Math.atan2(ze, Math.sqrt(xe * xe + ye * ye)) * Angle.RADIANS_TO_DEGREES;\n\n        return {ra, dec};\n    },\n\n    getLonSun(d, {w, e, M}) {\n        w = SunPosition.normalizeAngle360(w) * Angle.DEGREES_TO_RADIANS;\n        //e = SunPosition.normalizeAngle360(e) * Angle.DEGREES_TO_RADIANS;\n        M = SunPosition.normalizeAngle360(M) * Angle.DEGREES_TO_RADIANS;\n\n        const E = M + e * Math.sin(M) * (1.0 + e * Math.cos(M));\n\n        const xv = Math.cos(E) - e;\n        const yv = Math.sqrt(1.0 - e * e) * Math.sin(E);\n\n        const v = Math.atan2(yv, xv);\n        const rsun = Math.sqrt(xv * xv + yv * yv);\n\n        const lonsun = v + w;\n\n        return {lonsun, rsun};\n    },\n\n};\n\nexport default Celestial;","/**\n * @exports StarFieldProgram\n */\nimport WorldWind from 'webworldwind-esa';\n\nconst {\n    ArgumentError,\n    GpuProgram,\n    Logger,\n    Matrix,\n    Color\n} = WorldWind;\n\n/**\n * Constructs a new program.\n * Initializes, compiles and links this GLSL program with the source code for its vertex and fragment shaders.\n * <p>\n * This method creates WebGL shaders for the program's shader sources and attaches them to a new GLSL program.\n * This method then compiles the shaders and then links the program if compilation is successful.\n * Use the bind method to make the program current during rendering.\n *\n * @alias StarFieldProgram\n * @constructor\n * @augments GpuProgram\n * @classdesc StarFieldProgram is a GLSL program that draws points representing stars.\n * @param {WebGLRenderingContext} gl The current WebGL context.\n * @throws {ArgumentError} If the shaders cannot be compiled, or linking of the compiled shaders into a program\n * fails.\n */\nclass StarFieldProgram extends GpuProgram {\n    constructor(gl) {\n        super(gl, 'attribute vec4 vertexPoint;\\n' +\n\n            'uniform mat4 mvpMatrix;\\n' +\n            //number of days (positive or negative) since Greenwich noon, Terrestrial Time,\n            // on 1 January 2000 (J2000.0)\n            'uniform float numDays;\\n' +\n            'uniform vec2 magnitudeRange;\\n' +\n\n            'varying float magnitudeWeight;\\n' +\n\n            //normalizes an angle between 0.0 and 359.0\n            'float normalizeAngle(float angle) {\\n' +\n            '   float angleDivisions = angle / 360.0;\\n' +\n            '   return 360.0 * (angleDivisions - floor(angleDivisions));\\n' +\n            '}\\n' +\n\n            //transforms declination and right ascension in cartesian coordinates\n            'vec3 computePosition(float dec, float ra) {\\n' +\n            '   float GMST = normalizeAngle(280.46061837 + 360.98564736629 * numDays);\\n' +\n            '   float GHA = normalizeAngle(GMST - ra);\\n' +\n            '   float lon = -GHA + 360.0 * step(180.0, GHA);\\n' +\n            '   float latRad = radians(dec);\\n' +\n            '   float lonRad = radians(lon);\\n' +\n            '   float radCosLat = cos(latRad);\\n' +\n            '   return vec3(radCosLat * sin(lonRad), sin(latRad), radCosLat * cos(lonRad));\\n' +\n            '}\\n' +\n\n            //normalizes a value between 0.0 and 1.0\n            'float normalizeScalar(float value, float minValue, float maxValue){\\n' +\n            '   return (value - minValue) / (maxValue - minValue);\\n' +\n            '}\\n' +\n\n            'void main() {\\n' +\n            '   vec3 vertexPosition = computePosition(vertexPoint.x, vertexPoint.y);\\n' +\n            '   gl_Position = mvpMatrix * vec4(vertexPosition.xyz, 1.0);\\n' +\n            '   gl_Position.z = gl_Position.w - 0.00001;\\n' +\n            '   gl_PointSize = vertexPoint.z;\\n' +\n            '   magnitudeWeight = normalizeScalar(vertexPoint.w, magnitudeRange.x, magnitudeRange.y);\\n' +\n            '}', 'precision mediump float;\\n' +\n\n            'uniform sampler2D textureSampler;\\n' +\n            'uniform int fragMode;\\n' +\n            'uniform vec4 color;\\n' +\n\n            'varying float magnitudeWeight;\\n' +\n\n            'const vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\\n' +\n            'const vec4 grey = vec4(0.5, 0.5, 0.5, 1.0);\\n' +\n\n            'void main() {\\n' +\n            '   if (fragMode == 1) {\\n' +\n            '       gl_FragColor = texture2D(textureSampler, gl_PointCoord);\\n' +\n            '   }\\n' +\n            '   else if (fragMode == 0) {\\n' +\n            //paint the starts in shades of grey, where the brightest star is white and the dimmest star is grey\n            '       gl_FragColor = mix(white, grey, magnitudeWeight);\\n' +\n            '   }\\n' +\n            '   else if (fragMode == 2) {\\n' +\n            '       gl_FragColor = color;\\n' +\n            '   }\\n' +\n            '}', [\"vertexPoint\"]);\n\n        this.FRAG_MODE_MIX_COLOR = 0;\n        this.FRAG_MODE_TEXTURE = 1;\n        this.FRAG_MODE_COLOR = 2;\n\n        /**\n         * The WebGL location for this program's 'vertexPoint' attribute.\n         * @type {Number}\n         * @readonly\n         */\n        this.vertexPointLocation = this.attributeLocation(gl, \"vertexPoint\");\n\n        /**\n         * The WebGL location for this program's 'mvpMatrix' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.mvpMatrixLocation = this.uniformLocation(gl, \"mvpMatrix\");\n\n        /**\n         * The WebGL location for this program's 'numDays' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.numDaysLocation = this.uniformLocation(gl, \"numDays\");\n\n        /**\n         * The WebGL location for this program's 'magnitudeRangeLocation' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.magnitudeRangeLocation = this.uniformLocation(gl, \"magnitudeRange\");\n\n        /**\n         * The WebGL location for this program's 'textureSampler' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.textureUnitLocation = this.uniformLocation(gl, \"textureSampler\");\n\n        /**\n         * The WebGL location for this program's 'textureEnabled' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.fragModeLocation = this.uniformLocation(gl, \"fragMode\");\n\n        this.colorLocation = this.uniformLocation(gl, \"color\");\n\n        this.localState = {\n            mvpMatrix: null,\n            numDays: null,\n            magnitudeRange: null,\n            textureUnit: null,\n            fragMode: null,\n            color: null,\n        };\n    }\n\n    /**\n     * Loads the specified matrix as the value of this program's 'mvpMatrix' uniform variable.\n     *\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Matrix} matrix The matrix to load.\n     * @throws {ArgumentError} If the specified matrix is null or undefined.\n     */\n    loadModelviewProjection(gl, matrix) {\n        if (!matrix) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadModelviewProjection\", \"missingMatrix\"));\n        }\n\n        let forceLoad = false;\n        if (this.localState.mvpMatrix === null) {\n            forceLoad = true;\n            this.localState.mvpMatrix = Matrix.fromIdentity();\n        }\n\n        if (forceLoad || !this.localState.mvpMatrix.equals(matrix)) {\n            this.loadUniformMatrix(gl, matrix, this.mvpMatrixLocation);\n            this.localState.mvpMatrix.copy(matrix);\n        }\n    }\n\n    /**\n     * Loads the specified number as the value of this program's 'numDays' uniform variable.\n     *\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Number} numDays The number of days (positive or negative) since Greenwich noon, Terrestrial Time,\n     * on 1 January 2000 (J2000.0)\n     * @throws {ArgumentError} If the specified number is null or undefined.\n     */\n    loadNumDays(gl, numDays) {\n        if (numDays == null) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadNumDays\", \"missingNumDays\"));\n        }\n        if (this.localState.numDays !== numDays) {\n            gl.uniform1f(this.numDaysLocation, numDays);\n            this.localState.numDays = numDays;\n        }\n    }\n\n    /**\n     * Loads the specified numbers as the value of this program's 'magnitudeRange' uniform variable.\n     *\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Number} minMag\n     * @param {Number} maxMag\n     * @throws {ArgumentError} If the specified numbers are null or undefined.\n     */\n    loadMagnitudeRange(gl, minMag, maxMag) {\n        if (minMag == null) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadMagRange\", \"missingMinMag\"));\n        }\n        if (maxMag == null) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadMagRange\", \"missingMaxMag\"));\n        }\n        let forceLoad = false;\n        if (this.localState.magnitudeRange === null) {\n            forceLoad = true;\n            this.localState.magnitudeRange = [minMag, maxMag];\n        }\n\n        if (forceLoad || this.localState.magnitudeRange[0] !== minMag || this.localState.magnitudeRange[1] !== maxMag) {\n            gl.uniform2f(this.magnitudeRangeLocation, minMag, maxMag);\n            this.localState.magnitudeRange[0] = minMag;\n            this.localState.magnitudeRange[1] = maxMag;\n        }\n    }\n\n    /**\n     * Loads the specified number as the value of this program's 'textureSampler' uniform variable.\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Number} unit The texture unit.\n     */\n    loadTextureUnit(gl, unit) {\n        if (this.localState.textureUnit !== unit) {\n            gl.uniform1i(this.textureUnitLocation, unit - gl.TEXTURE0);\n            this.localState.textureUnit = unit;\n        }\n    }\n\n    loadFragMode(gl, mode) {\n        if (this.localState.fragMode !== mode) {\n            gl.uniform1i(this.fragModeLocation, mode);\n            this.localState.fragMode = mode;\n        }\n    }\n\n    loadColor(gl, color) {\n        let forceLoad = false;\n        if (this.localState.color === null) {\n            forceLoad = true;\n            this.localState.color = new Color(0, 0, 0, 0);\n        }\n\n        if (forceLoad || !this.localState.color.equals(color)) {\n            this.loadUniformColor(gl, color, this.colorLocation);\n            this.localState.color.copy(color);\n        }\n    }\n}\n\n/**\n * A string that uniquely identifies this program.\n * @type {string}\n * @readonly\n */\nStarFieldProgram.key = \"WorldWindGpuStarFieldFullProgram\";\n\nexport default StarFieldProgram;","/**\n * @exports StarFieldLayer\n */\nimport Celestial from './Celestial';\nimport StarFieldProgram from './StarFieldProgram';\nimport SunPosition from './SunPosition';\n\nimport WorldWind from 'webworldwind-esa';\nconst {\n    Color,\n    Layer,\n    Logger,\n    Matrix,\n    REDRAW_EVENT_TYPE\n} = WorldWind;\n\n\n/**\n * Constructs a layer showing stars and the Sun around the Earth.\n * If used together with the AtmosphereLayer, the StarFieldLayer must be inserted before the AtmosphereLayer.\n *\n * If you want to use your own star data, the file provided must be .json\n * and the fields 'ra', 'dec' and 'vmag' must be present in the metadata.\n * ra and dec must be expressed in degrees.\n *\n * This layer uses J2000.0 as the ref epoch.\n *\n * If the star data .json file is too big, consider enabling gzip compression on your web server.\n * For more info about enabling gzip compression consult the configuration for your web server.\n *\n *\n -- output format : json\n SELECT \"I/239/hip_main\".HIP,  \"I/239/hip_main\".Vmag as vmag, \"I/239/hip_main\".\"_RA.icrs\" as ra,  \"I/239/hip_main\".\"_DE.icrs\" as dec\n FROM \"I/239/hip_main\"\n WHERE \"I/239/hip_main\".Vmag <=6.5\n *\n * @alias StarFieldLayer\n * @constructor\n * @classdesc Provides a layer showing stars, and the Sun around the Earth\n * @param {URL} starDataSource optional url for the stars data\n * @augments Layer\n */\nclass StarFieldLayer extends Layer {\n    constructor(starDataSource) {\n        super('StarField');\n\n        // The StarField Layer is not pickable.\n        this.pickEnabled = false;\n\n        /**\n         * The size of the Sun in pixels.\n         * This can not exceed the maximum allowed pointSize of the GPU.\n         * A warning will be given if the size is too big and the allowed max size will be used.\n         * @type {Number}\n         * @default 128\n         */\n        this.sunSize = 128;\n\n        /**\n         * Indicates weather to show or hide the Sun\n         * @type {Boolean}\n         * @default true\n         */\n        this.showSun = true;\n\n        //Documented in defineProperties below.\n        this._starDataSource = starDataSource || WorldWind.configuration.baseUrl + 'data/stars.json';\n        this._sunImageSource = WorldWind.configuration.baseUrl + 'images/sunTexture.png';\n\n        //Internal use only.\n        //The MVP matrix of this layer.\n        this._matrix = Matrix.fromIdentity();\n\n        //Internal use only.\n        //gpu cache key for the stars vbo.\n        this._starsPositionsVboCacheKey = null;\n\n        //Internal use only.\n        this._numStars = 0;\n\n        //Internal use only.\n        this._starData = null;\n\n        //Internal use only.\n        this._minMagnitude = Number.MAX_VALUE;\n        this._maxMagnitude = Number.MIN_VALUE;\n\n        //Internal use only.\n        //A flag to indicate the star data is currently being retrieved.\n        this._loadStarted = false;\n\n        //Internal use only.\n        this._minScale = 30e6;\n        this._scale = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n        //this._scale = 50e6;\n\n        //Internal use only.\n        this._sunPositionsCacheKey = '';\n        this._sunBufferView = new Float32Array(4);\n\n        //Internal use only.\n        this._MAX_GL_POINT_SIZE = 0;\n\n        this.showPlanets = true;\n\n        const jupiterSize = 32;\n\n        this.planets = [\n            {\n                id: Celestial.MERCURY,\n                url: 'images/Mercury64.png',\n                size: jupiterSize / 4,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.VENUS,\n                url: 'images/Venus64.png',\n                size: jupiterSize / 4,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.MARS,\n                url: 'images/Mars64.png',\n                size: jupiterSize / 4,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.JUPITER,\n                url: 'images/Jupiter64.png',\n                size: jupiterSize,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.SATURN,\n                url: 'images/Saturn64.png',\n                size: jupiterSize,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.URANUS,\n                url: 'images/Uranus64.png',\n                size: jupiterSize / 2,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.NEPTUNE,\n                url: 'images/Neptune64.png',\n                size: jupiterSize / 2,\n                ra: null,\n                dec: null,\n            },\n        ];\n\n        this._planetsBufferView = null;\n\n        this._cacheKeys = {\n            sunPosition: '',\n            planetPositions: '',\n            starPositions: ''\n        };\n    }\n\n    /**\n     * Url for the stars data.\n     * @memberof StarFieldLayer.prototype\n     * @type {URL}\n     */\n    get starDataSource() {\n        return this._starDataSource;\n    }\n    \n    set starDataSource(value) {\n        this._starDataSource = value;\n        this.invalidateStarData();\n    }\n\n    /**\n     * Url for the sun texture image.\n     * @memberof StarFieldLayer.prototype\n     * @type {URL}\n     */\n    get sunImageSource() {\n        return this._sunImageSource;\n    }\n    \n    set sunImageSource(value) {\n        this._sunImageSource = value;\n    }\n\n    // Documented in superclass.\n    doRender(dc) {\n        if (dc.globe.is2D()) {\n            return;\n        }\n\n        if (!this.haveResources(dc)) {\n            this.loadResources(dc);\n            return;\n        }\n\n        this.beginRendering(dc);\n        try {\n            this.doDraw(dc);\n        }\n        finally {\n            this.endRendering(dc);\n        }\n    }\n\n    // Internal. Intentionally not documented.\n    haveResources(dc) {\n        let sunTexture = dc.gpuResourceCache.resourceForKey(this._sunImageSource);\n        let planetTextures = this.planets.every(planet => {\n            const texture = dc.gpuResourceCache.resourceForKey(planet.url);\n            return !!texture;\n        });\n        return (\n            this._starData != null &&\n            sunTexture != null &&\n            planetTextures\n        );\n    }\n\n    // Internal. Intentionally not documented.\n    loadResources(dc) {\n        let gl = dc.currentGlContext;\n        let gpuResourceCache = dc.gpuResourceCache;\n\n        if (!this._starData) {\n            this.fetchStarData();\n        }\n\n        let sunTexture = gpuResourceCache.resourceForKey(this._sunImageSource);\n        if (!sunTexture) {\n            gpuResourceCache.retrieveTexture(gl, this._sunImageSource);\n        }\n\n        this.planets.forEach(planet => {\n            const texture = gpuResourceCache.resourceForKey(planet.url);\n            if (!texture) {\n                gpuResourceCache.retrieveTexture(gl, planet.url);\n            }\n        });\n    }\n\n    // Internal. Intentionally not documented.\n    beginRendering(dc) {\n        let gl = dc.currentGlContext;\n        dc.findAndBindProgram(StarFieldProgram);\n        gl.enableVertexAttribArray(0);\n        gl.depthMask(false);\n    }\n\n    // Internal. Intentionally not documented.\n    doDraw(dc) {\n        this.loadCommonUniforms(dc);\n\n        this.renderStars(dc);\n\n        if (this.showSun) {\n            this.renderSun(dc);\n        }\n\n        if (this.showPlanets) {\n            this.renderPlanets(dc);\n        }\n    }\n\n    // Internal. Intentionally not documented.\n    loadCommonUniforms(dc) {\n        let gl = dc.currentGlContext;\n        let program = dc.currentProgram;\n\n        let mvp = dc.modelviewProjection || dc.navigatorState.modelviewProjection;\n        this._matrix.copy(mvp);\n        this._matrix.multiplyByScale(this._scale, this._scale, this._scale);\n\n        program.loadModelviewProjection(gl, this._matrix);\n\n        //this subtraction does not work properly on the GPU, it must be done on the CPU\n        //possibly due to precision loss\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        let julianDate = SunPosition.computeJulianDate(this.time || new Date());\n        program.loadNumDays(gl, julianDate - 2451545.0);\n    }\n\n    // Internal. Intentionally not documented.\n    renderStars(dc) {\n        let gl = dc.currentGlContext;\n        let gpuResourceCache = dc.gpuResourceCache;\n        let program = dc.currentProgram;\n\n        if (!this._starsPositionsVboCacheKey) {\n            this._starsPositionsVboCacheKey = gpuResourceCache.generateCacheKey();\n        }\n        let vboId = gpuResourceCache.resourceForKey(this._starsPositionsVboCacheKey);\n        if (!vboId) {\n            vboId = gl.createBuffer();\n            let positions = this.createStarsGeometry();\n            gpuResourceCache.putResource(this._starsPositionsVboCacheKey, vboId, positions.length * 4);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n        }\n        else {\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n        }\n        dc.frameStatistics.incrementVboLoadCount(1);\n\n        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n        program.loadMagnitudeRange(gl, this._minMagnitude, this._maxMagnitude);\n        program.loadFragMode(gl, program.FRAG_MODE_MIX_COLOR);\n\n        gl.drawArrays(gl.POINTS, 0, this._numStars);\n    }\n\n    // Internal. Intentionally not documented.\n    renderPlanets(dc) {\n        let gl = dc.currentGlContext;\n        let program = dc.currentProgram;\n        let gpuResourceCache = dc.gpuResourceCache;\n\n        if (!this._MAX_GL_POINT_SIZE) {\n            this._MAX_GL_POINT_SIZE = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE)[1];\n        }\n        if (this.sunSize > this._MAX_GL_POINT_SIZE) {\n            Logger.log(Logger.LEVEL_WARNING, 'StarFieldLayer - sunSize is to big, max size allowed is: ' +\n                this._MAX_GL_POINT_SIZE);\n        }\n\n        this.planets.forEach(planet => {\n            const {ra, dec} = Celestial.getCelestialLocation(planet.id, this.time || new Date());\n            planet.ra = ra;\n            planet.dec = dec;\n        }, this);\n\n        if (!this._planetsBufferView) {\n            this._planetsBufferView = new Float32Array(this.planets.length * 4);\n        }\n\n        for (let i = 0; i < this.planets.length; i++) {\n            let planet = this.planets[i];\n            this._planetsBufferView[i * 4 + 0] = planet.dec;\n            this._planetsBufferView[i * 4 + 1] = planet.ra;\n            this._planetsBufferView[i * 4 + 2] = Math.min(planet.size, this._MAX_GL_POINT_SIZE);\n            this._planetsBufferView[i * 4 + 3] = 1;\n        }\n\n        if (!this._planetsPositionsVboCacheKey) {\n            this._planetsPositionsVboCacheKey = gpuResourceCache.generateCacheKey();\n        }\n        let vboId = gpuResourceCache.resourceForKey(this._planetsPositionsVboCacheKey);\n        if (!vboId) {\n            vboId = gl.createBuffer();\n            gpuResourceCache.putResource(this._planetsPositionsVboCacheKey, vboId, this._planetsBufferView.length * 4);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferData(gl.ARRAY_BUFFER, this._planetsBufferView, gl.DYNAMIC_DRAW);\n        }\n        else {\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._planetsBufferView);\n        }\n        dc.frameStatistics.incrementVboLoadCount(1);\n        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n        program.loadFragMode(gl, program.FRAG_MODE_TEXTURE);\n\n        for (let i = 0; i < this.planets.length; i++) {\n            let textureSrc = this.planets[i].url;\n            let texture = dc.gpuResourceCache.resourceForKey(textureSrc);\n            texture.bind(dc);\n            gl.drawArrays(gl.POINTS, i, 1);\n        }\n    }\n\n    // Internal. Intentionally not documented.\n    renderSun(dc) {\n        let gl = dc.currentGlContext;\n        let program = dc.currentProgram;\n        let gpuResourceCache = dc.gpuResourceCache;\n\n        if (!this._MAX_GL_POINT_SIZE) {\n            this._MAX_GL_POINT_SIZE = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE)[1];\n        }\n        if (this.sunSize > this._MAX_GL_POINT_SIZE) {\n            Logger.log(Logger.LEVEL_WARNING, 'StarFieldLayer - sunSize is to big, max size allowed is: ' +\n                this._MAX_GL_POINT_SIZE);\n        }\n\n        let sunCelestialLocation = SunPosition.getAsCelestialLocation(this.time || new Date());\n\n        this._sunBufferView[0] = sunCelestialLocation.declination;\n        this._sunBufferView[1] = sunCelestialLocation.rightAscension;\n        this._sunBufferView[2] = Math.min(this.sunSize, this._MAX_GL_POINT_SIZE);\n        this._sunBufferView[3] = 1;\n\n        if (!this._sunPositionsCacheKey) {\n            this._sunPositionsCacheKey = gpuResourceCache.generateCacheKey();\n        }\n        let vboId = gpuResourceCache.resourceForKey(this._sunPositionsCacheKey);\n        if (!vboId) {\n            vboId = gl.createBuffer();\n            gpuResourceCache.putResource(this._sunPositionsCacheKey, vboId, this._sunBufferView.length * 4);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferData(gl.ARRAY_BUFFER, this._sunBufferView, gl.DYNAMIC_DRAW);\n        }\n        else {\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._sunBufferView);\n        }\n        dc.frameStatistics.incrementVboLoadCount(1);\n        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n        program.loadFragMode(gl, program.FRAG_MODE_TEXTURE);\n\n        let sunTexture = dc.gpuResourceCache.resourceForKey(this._sunImageSource);\n        sunTexture.bind(dc);\n\n        gl.drawArrays(gl.POINTS, 0, 1);\n    }\n\n    // Internal. Intentionally not documented.\n    endRendering(dc) {\n        let gl = dc.currentGlContext;\n        gl.depthMask(true);\n        gl.disableVertexAttribArray(0);\n    }\n\n    // Internal. Intentionally not documented.\n    fetchStarData() {\n        if (this._loadStarted) {\n            return;\n        }\n\n        this._loadStarted = true;\n        let self = this;\n        let xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            if (this.status >= 200 && this.status < 300) {\n                try {\n                    self._starData = JSON.parse(this.response);\n                    self.sendRedrawRequest();\n                }\n                catch (e) {\n                    Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer unable to parse JSON for star data ' +\n                        e.toString());\n                }\n            }\n            else {\n                Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer unable to fetch star data. Status: ' +\n                    this.status + ' ' + this.statusText);\n            }\n            self._loadStarted = false;\n        };\n\n        xhr.onerror = function () {\n            Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer unable to fetch star data');\n            self._loadStarted = false;\n        };\n\n        xhr.ontimeout = function () {\n            Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer fetch star data has timeout');\n            self._loadStarted = false;\n        };\n\n        xhr.open('GET', this._starDataSource, true);\n        xhr.send();\n    }\n\n    // Internal. Intentionally not documented.\n    createStarsGeometry() {\n        let indexes = this.parseStarsMetadata(this._starData.metadata);\n\n        if (indexes.raIndex === -1) {\n            throw new Error(\n                Logger.logMessage(Logger.LEVEL_SEVERE, 'StarFieldLayer', 'createStarsGeometry',\n                    'Missing ra field in star data.'));\n        }\n        if (indexes.decIndex === -1) {\n            throw new Error(\n                Logger.logMessage(Logger.LEVEL_SEVERE, 'StarFieldLayer', 'createStarsGeometry',\n                    'Missing dec field in star data.'));\n        }\n        if (indexes.magIndex === -1) {\n            throw new Error(\n                Logger.logMessage(Logger.LEVEL_SEVERE, 'StarFieldLayer', 'createStarsGeometry',\n                    'Missing vmag field in star data.'));\n        }\n\n        let data = this._starData.data;\n        let positions = [];\n\n        this._minMagnitude = Number.MAX_VALUE;\n        this._maxMagnitude = Number.MIN_VALUE;\n\n        for (let i = 0, len = data.length; i < len; i++) {\n            let starInfo = data[i];\n            let declination = starInfo[indexes.decIndex]; //for latitude\n            let rightAscension = starInfo[indexes.raIndex]; //for longitude\n            let magnitude = starInfo[indexes.magIndex];\n            let pointSize = magnitude < 2 ? 2 : 1;\n            positions.push(declination, rightAscension, pointSize, magnitude);\n\n            this._minMagnitude = Math.min(this._minMagnitude, magnitude);\n            this._maxMagnitude = Math.max(this._maxMagnitude, magnitude);\n        }\n        this._numStars = Math.floor(positions.length / 4);\n\n        return positions;\n    }\n\n    // Internal. Intentionally not documented.\n    parseStarsMetadata(metadata) {\n        let raIndex = -1,\n            decIndex = -1,\n            magIndex = -1;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            let starMetaInfo = metadata[i];\n            if (starMetaInfo.name === 'ra') {\n                raIndex = i;\n            }\n            if (starMetaInfo.name === 'dec') {\n                decIndex = i;\n            }\n            if (starMetaInfo.name === 'vmag') {\n                magIndex = i;\n            }\n        }\n        return {\n            raIndex: raIndex,\n            decIndex: decIndex,\n            magIndex: magIndex\n        };\n    }\n\n    // Internal. Intentionally not documented.\n    invalidateStarData() {\n        this._starData = null;\n        this._starsPositionsVboCacheKey = null;\n    }\n\n    // Internal. Intentionally not documented.\n    sendRedrawRequest() {\n        let e = document.createEvent('Event');\n        e.initEvent(REDRAW_EVENT_TYPE, true, true);\n        window.dispatchEvent(e);\n    }\n}\n\nexport default StarFieldLayer;\n","import WorldWind from 'webworldwind-esa';\n\nconst PickedObject = WorldWind.PickedObject,\n    SurfacePolygon = WorldWind.SurfacePolygon,\n    SurfaceShape = WorldWind.SurfaceShape;\n\n/**\n * If no image is set, it behaves the same as a SurfaceShape.\n * To set an image pass it to the shape .image property (myShape.image = myImg;)\n *\n * Limitations with an image:\n * The boundaries have to define a quadrilateral (can be defined by 4 corners)\n * If the edges arc over the globe, the interior will not be filled properly\n * Shapes that cross the anti-meridian will not use the image\n * Performance is lower\n *\n * When used with an image it will divide the image in cells (based on the step, maxImageWidth, maxImageHeight values)\n * and draw each image cell to the canvas\n * This is a slow operation, try to keep the number of cells \"low\"\n * For example:\n * step = 1, maxImageWidth = 64, maxImageHeight = 64\n * will produce 4096 (64 * 64 * 1) cells\n */\nclass TexturedSurfaceShape extends SurfaceShape {\n    constructor(attributes) {\n        super(attributes);\n\n        /**\n         * Image to draw on the surface of the shape.\n         * @type {Image}\n         */\n        this.image = null;\n\n        /**\n         * Determines the division step of the image\n         * Lower numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.step = 1;\n\n        /**\n         * Resizes the image\n         * Higher numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.maxImageWidth = 64;\n        this.maxImageHeight = 64;\n    }\n\n    get image() {\n        return this._image;\n    }\n\n    set image(img) {\n        this._image = img;\n        this.stateKeyInvalid = true;\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    renderToTexture(dc, ctx2D, xScale, yScale, dx, dy) {\n        let attributes = (this.highlighted ? (this.highlightAttributes || this._attributes) : this._attributes);\n        let drawInterior = (!this._isInteriorInhibited && attributes.drawInterior);\n        let drawOutline = (attributes.drawOutline && attributes.outlineWidth > 0);\n        let pickColor;\n\n        if (!drawInterior && !drawOutline) {\n            return;\n        }\n\n        if (dc.pickingMode && !this.pickColor) {\n            this.pickColor = dc.uniquePickColor();\n        }\n\n        if (dc.pickingMode) {\n            pickColor = this.pickColor.toHexString();\n        }\n\n        if (this.crossesAntiMeridian || this.containsPole) {\n            if (drawInterior) {\n                this.draw(this._interiorGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                ctx2D.fill();\n            }\n            if (drawOutline) {\n                this.draw(this._outlineGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        } else {\n            if (this.image && !dc.pickingMode) {\n                ctx2D.save();\n            }\n            let points = this._interiorGeometry[0].map(location => ({\n                x: location.longitude * xScale + dx,\n                y: location.latitude * yScale + dy\n            }));\n            this.drawPoints(points, ctx2D);\n            if (drawInterior) {\n                if (this.image && !dc.pickingMode) {\n                    ctx2D.clip();\n                    this.drawImageToPolygon(ctx2D, this.image, points);\n                    ctx2D.restore();\n                }\n                else {\n                    ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                    ctx2D.fill();\n                }\n            }\n            if (drawOutline) {\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        }\n\n        if (dc.pickingMode) {\n            let po = new PickedObject(this.pickColor.clone(), this.pickDelegate ? this.pickDelegate : this,\n                null, this.layer, false);\n            dc.resolvePick(po);\n        }\n    }\n\n    drawPoints(points, ctx2D) {\n        ctx2D.beginPath();\n        ctx2D.moveTo(points[0].x, points[0].y);\n        for (let i = 1, len = points.length; i < len; i++) {\n            ctx2D.lineTo(points[i].x, points[i].y);\n        }\n    }\n\n    drawImageToPolygon(ctx, image, points) {\n        let canvasWidth = ctx.canvas.width;\n        let canvasHeight = ctx.canvas.height;\n\n        let offScreenCanvas = TexturedSurfaceShape.offScreenCanvas();\n        let offScreenCtx = TexturedSurfaceShape.offScreenCtx();\n\n        let corners = this.getCorners(points);\n        let axesDim = this.getAxesDimensions(corners);\n\n        let offScreenWidth = Math.min(axesDim.distX, this.maxImageWidth);\n        let offScreenHeight = Math.min(axesDim.distY, this.maxImageHeight);\n\n        offScreenCanvas.width = offScreenWidth;\n        offScreenCanvas.height = offScreenHeight;\n        offScreenCtx.drawImage(image, 0, 0, offScreenWidth, offScreenHeight);\n\n        let step = this.step;\n        let width = offScreenWidth - 1;\n        let height = offScreenHeight - 1;\n        let topLeft, topRight, bottomRight, bottomLeft, y1Current, y2Current, y1Next, y2Next;\n\n        for (let y = 0; y < height; y += step) {\n            y1Current = this.lerp(corners[0], corners[3], y / height);\n            y2Current = this.lerp(corners[1], corners[2], y / height);\n            y1Next = this.lerp(corners[0], corners[3], (y + step) / height);\n            y2Next = this.lerp(corners[1], corners[2], (y + step) / height);\n\n            for (let x = 0; x < width; x += step) {\n                topLeft = this.lerp(y1Current, y2Current, x / width);\n                topRight = this.lerp(y1Current, y2Current, (x + step) / width);\n                bottomRight = this.lerp(y1Next, y2Next, (x + step) / width);\n                bottomLeft = this.lerp(y1Next, y2Next, x / width);\n\n                let dWidth = Math.ceil(Math.max(step, Math.abs(topRight.x - topLeft.x), Math.abs(bottomLeft.x - bottomRight.x))) + 1;\n                let dHeight = Math.ceil(Math.max(step, Math.abs(topLeft.y - bottomLeft.y), Math.abs(topRight.y - bottomRight.y))) + 1;\n\n                if (this.isRectInsideCanvas(topLeft, dWidth, dHeight, canvasWidth, canvasHeight)) {\n                    ctx.drawImage(offScreenCanvas, x, y, step, step, topLeft.x, topLeft.y, dWidth, dHeight);\n                }\n            }\n        }\n    }\n\n    getCorners(points, bbox) {\n        bbox = bbox || this.getBbox(points);\n\n        let edgePoints = points.filter(point => this.isEdgePoint(point, bbox));\n\n        if (edgePoints.length === 5 &&\n            this.arePointsEqual(edgePoints[0], edgePoints[edgePoints.length - 1])) {\n            edgePoints.length = 4;\n        }\n\n        if (edgePoints.length > 4) {\n            let leftPoints = edgePoints.filter(point => point.x === bbox.minX);\n            let rightPoints = edgePoints.filter(point => point.x === bbox.maxX);\n\n            let {top: topLeft, bottom: bottomLeft} = this.getTopBottom(leftPoints);\n            let {top: topRight, bottom: bottomRight} = this.getTopBottom(rightPoints);\n\n            return [topLeft, topRight, bottomRight, bottomLeft];\n        }\n\n        let slope1 = this.getSlope(edgePoints[0], edgePoints[2]);\n        let slope2 = this.getSlope(edgePoints[1], edgePoints[3]);\n        let topLeftPoint = this.getTopLeftPoint(slope1, edgePoints[0], edgePoints[2]) ||\n            this.getTopLeftPoint(slope2, edgePoints[1], edgePoints[3]);\n\n        if (!topLeftPoint) {\n            console.log('Could not determine top left corner with the slope method');\n            return edgePoints;\n        }\n\n        let topLeftIndex = edgePoints.findIndex(point => point.x === topLeftPoint.x && point.y === topLeftPoint.y);\n        let newCorners = [];\n        for (let i = topLeftIndex; i < edgePoints.length + topLeftIndex; i++) {\n            newCorners.push(edgePoints[i % edgePoints.length]);\n        }\n\n        return newCorners;\n    }\n\n    getBbox(points) {\n        let bbox = {\n            minX: Number.MAX_SAFE_INTEGER,\n            maxX: Number.MIN_SAFE_INTEGER,\n            minY: Number.MAX_SAFE_INTEGER,\n            maxY: Number.MIN_SAFE_INTEGER,\n        };\n\n        return points.reduce((bbox, point) => {\n            bbox.minX = Math.min(bbox.minX, point.x);\n            bbox.maxX = Math.max(bbox.maxX, point.x);\n            bbox.minY = Math.min(bbox.minY, point.y);\n            bbox.maxY = Math.max(bbox.maxY, point.y);\n\n            return bbox;\n        }, bbox);\n    }\n\n    getTopBottom(points) {\n        return points.reduce((acc, point) => {\n            if (point.y < acc.top.y) {\n                acc.top = point;\n            }\n\n            if (point.y > acc.bottom.y) {\n                acc.bottom = point;\n            }\n\n            return acc;\n        }, {top: points[0], bottom: points[0]});\n    }\n\n    distance(p1, p2) {\n        let dx = p1.x - p2.x;\n        let dy = p1.y - p2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    isEdgePoint(point, bbox) {\n        return (\n            point.x === bbox.minX || point.x === bbox.maxX ||\n            point.y === bbox.minY || point.y === bbox.maxY\n        );\n    }\n\n    arePointsEqual(p1, p2) {\n        return p1.x === p2.x && p1.y === p2.y;\n    }\n\n    getSlope(p1, p2) {\n        return (p1.y - p2.y) / (p1.x - p2.x);\n    }\n\n    getTopLeftPoint(slope, point1, point2) {\n        if (slope <= 0) {\n            return null;\n        }\n\n        if (point1.y < point2.y) {\n            return point1;\n        }\n\n        return point2;\n    }\n\n    getAxesDimensions(corners) {\n        let dx = Math.abs(corners[0].x - corners[1].x);\n        let dy = Math.abs(corners[0].y - corners[1].y);\n\n        let distX = 0;\n        let distY = 0;\n\n        if (dx > dy) {\n            distX = this.distance(corners[0], corners[1]);\n            distY = this.distance(corners[0], corners[3]);\n        }\n        else {\n            distX = this.distance(corners[0], corners[3]);\n            distY = this.distance(corners[0], corners[1]);\n        }\n\n        return {distX, distY};\n    }\n\n    lerp(p1, p2, t) {\n        return {\n            x: p1.x + (p2.x - p1.x) * t,\n            y: p1.y + (p2.y - p1.y) * t\n        };\n    }\n\n    isRectInsideCanvas(point, width, height, canvasWidth, canvasHeight) {\n        return (\n            point.x + width >= 0 &&\n            point.x <= canvasWidth &&\n            point.y + height >= 0 &&\n            point.y < canvasHeight\n        );\n    }\n\n    static offScreenCanvas() {\n        if (!TexturedSurfaceShape.canvas) {\n            TexturedSurfaceShape.canvas = document.createElement('canvas');\n        }\n        return TexturedSurfaceShape.canvas;\n    }\n\n    static offScreenCtx() {\n        if (!TexturedSurfaceShape.ctx) {\n            let canvas = TexturedSurfaceShape.offScreenCanvas();\n            TexturedSurfaceShape.ctx = canvas.getContext('2d');\n        }\n        return TexturedSurfaceShape.ctx;\n    }\n}\n\nexport default TexturedSurfaceShape;","import WorldWind from 'webworldwind-esa';\r\n\r\nconst {\r\n    ColladaScene,\r\n    Matrix,\r\n    Renderable\r\n} = WorldWind;\r\n\r\n/**\r\n * @exports Model\r\n */\r\nclass Model extends Renderable {\r\n    /**\r\n     * Constructs model of the satellite on the given position.\r\n     * @param model {Object} Model information. Collada information.\r\n     * @param satellite {Object} The details about the satellite and the way it should be transformed and presented.\r\n     * @param position {Position} The exact position of the center of the satellite.\r\n     */\r\n    constructor(model, satellite, position) {\r\n        super();\r\n\r\n        this._satellite = satellite;\r\n        const satelliteModel = this.parse(model);\r\n        this.draw(position, satelliteModel);\r\n    }\r\n\r\n    /**\r\n     * Updates the position of the model.\r\n     * @param position {Position} Current position of the model.\r\n     */\r\n    position(position) {\r\n        this._model.position = position;\r\n    }\r\n\r\n    /**\r\n     * Draws the collada model into a Collada Scene.\r\n     * @param position {Position} Position of the satellite.\r\n     * @param modelData Collada Model Information.\r\n     */\r\n    draw(position, modelData) {\r\n        const nodesToHide = [\r\n            'PlatformCircleAndName', 'SolarWingsCircleAndName', 'C-SarCircleAndName',\r\n            'PlatformTextsAndArrows', 'SolarWingsTextsAndArrows', 'C-SarTextsAndArrows',\r\n\r\n            'SolarArrayGroup', 'WingsDetailsGroup', 'Group004', 'MsiGroup', 'SatteliteGroup',\r\n\r\n            'SatteliteDimensionsGroup', 'MWRGroup', 'SRALGroup', 'OLCIGroup', 'SLSTRGroup'\r\n        ];\r\n        const {\r\n            rotations,\r\n            translations,\r\n            preRotations,\r\n            scale,\r\n            shortName,\r\n            ignoreLocalTransforms\r\n        } = this._satellite;\r\n\r\n        const model = new ColladaScene(position, modelData);\r\n        model.type = this.type;\r\n        model.satShortName = shortName;\r\n\r\n        model.nodesToHide = nodesToHide;\r\n        model.hideNodes = true;\r\n        model.useTexturePaths = false;\r\n        model.localTransforms = ignoreLocalTransforms;\r\n        model.scale = scale;\r\n        model.xRotation = rotations.x;\r\n        model.yRotation = rotations.y;\r\n        model.zRotation = rotations.z;\r\n        model.xTranslation = translations.x;\r\n        model.yTranslation = translations.y;\r\n        model.zTranslation = translations.z;\r\n        model.preX = preRotations.x;\r\n        model.preY = preRotations.y;\r\n        model.preZ = preRotations.z;\r\n\r\n        this._model = model;\r\n        modelData = null;\r\n    }\r\n\r\n    /**\r\n     * Parses the collada model and update the information relevant to the satellites.\r\n     * @param {{ meshes:Object, root:Object, materials:{reflective:Array, diffuse:Array} }} jsonData\r\n     * @return {Object} Collada model.\r\n     */\r\n    parse(jsonData) {\r\n        const meshes = jsonData.meshes;\r\n        const nodes = jsonData.root.children;\r\n        const materials = jsonData.materials;\r\n\r\n        for (let key in meshes) {\r\n            if (meshes.hasOwnProperty(key)) {\r\n                const buffers = meshes[key].buffers;\r\n\r\n                for (let i = 0; i < buffers.length; i++) {\r\n                    const vertices = buffers[i].vertices || [];\r\n                    const normals = buffers[i].normals || [];\r\n                    const uvs = buffers[i].uvs || [];\r\n                    const indices = buffers[i].indices || [];\r\n\r\n                    const eVertices = new Float32Array(vertices);\r\n                    const eNormals = new Float32Array(normals);\r\n                    const eUvs = new Float32Array(uvs);\r\n                    const eIndices = new Uint16Array(indices);\r\n\r\n                    buffers[i].vertices = eVertices;\r\n                    buffers[i].normals = eNormals;\r\n                    buffers[i].uvs = eUvs;\r\n                    buffers[i].indices = eIndices;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            if (node.mesh) {\r\n                const worldMatrix = node.worldMatrix.slice(0);\r\n                node.worldMatrix = Matrix.fromIdentity();\r\n                node.worldMatrix.copy(worldMatrix);\r\n\r\n                if (node.children.length) {\r\n                    console.info('node has children', node);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let key in materials) {\r\n            if (materials.hasOwnProperty(key)) {\r\n                const material = materials[key];\r\n\r\n                if (material.id === '_3_-_Default-material') {\r\n                    if (material.reflective) {\r\n                        material.reflective[0] = 0.289219;\r\n                        material.reflective[1] = 0.713497;\r\n                        material.reflective[2] = 0.870753;\r\n                        material.reflective[3] = 1;\r\n                    }\r\n                } else if (material.id === '_1_-_Default_004-material') {\r\n                    material.diffuse[3] = 0;\r\n                } else if (material.id === '_1_-_Default-material') {\r\n                    material.diffuse[3] = 0;\r\n                } else if (material.id === 'Chrome-material') {\r\n                    material.textures = null;\r\n                    material.diffuse[0] = 0.3137;\r\n                    material.diffuse[1] = 0.3137;\r\n                    material.diffuse[2] = 0.3137;\r\n                } else if (material.id === 'Satellite_panel-material') {\r\n                    material.textures.reflective.mapId = 'image9';\r\n                } else if (material.id === '_3_-_Default') {\r\n                    material.textures.reflective.mapId = 'image4';\r\n                } else if (material.id === '_4_-_Default-material') {\r\n                    material.textures.reflective.mapId = 'image5';\r\n                } else if (material.id === '_5_-_Default_002-material') {\r\n                    material.textures.reflective.mapId = 'image6';\r\n                } else if (material.id === '_5_-_Default-material') {\r\n                    material.textures.reflective.mapId = 'image5';\r\n                }\r\n            }\r\n        }\r\n\r\n        return jsonData;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    render(dc) {\r\n        if(!this._model || !this.enabled) {\r\n            return;\r\n        }\r\n\r\n        this._model.render(dc);\r\n    }\r\n}\r\n\r\nexport default Model;","import WorldWind from 'webworldwind-esa';\nimport TexturedSurfaceShape from './TexturedSurfaceShape';\n\nconst SurfacePolygon = WorldWind.SurfacePolygon;\n\n/**\n * @exports TexturedSurfacePolygon\n */\nclass TexturedSurfacePolygon extends TexturedSurfaceShape {\n    /**\n     * Constructs Textured Surface Polygon. The polygon is drawn using the standard attributes. Unlike the standard\n     * surface polygon it draws associated image on the area of the polygon.\n     * @param boundaries {Location[]} Array of locations enclosing the surface polygon.\n     * @param attributes {ShapeAttributes} Attributes used for the styling of the Surface Polygon\n     */\n    constructor(boundaries, attributes) {\n        super(attributes);\n\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - constructor - The specified boundary is not an array.');\n        }\n\n        /**\n         * Boundaries relevant for the current polygon.\n         * @type {Location[]}\n         * @memberof TexturedSurfacePolygon.prototype\n         * @public\n         */\n        this.boundaries = boundaries;\n\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    get boundaries() {\n        return this._boundaries;\n    }\n\n    set boundaries(boundaries) {\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - set boundaries - The specified boundary is not an array.');\n        }\n\n        this.resetBoundaries();\n        this._boundaries = boundaries;\n        this._stateId = SurfacePolygon.stateId++;\n        this.stateKeyInvalid = true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeStateKey() {\n        return TexturedSurfacePolygon.staticStateKey(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeBoundaries(dc) {\n    }\n\n    static staticStateKey(shape) {\n        return SurfacePolygon.staticStateKey(shape) + \" pg \" + shape._stateId;\n    }\n}\n\nexport default TexturedSurfacePolygon;","import WorldWind from 'webworldwind-esa';\nimport SatelliteModel from './wwwx/shapes/satellites/Model';\n\n// const Location = WorldWind.Location,\n//     Sector = WorldWind.Sector,\n//     WmsLayer = WorldWind.WmsLayer;\n\n// class modelsLayer extends Layer {\n//     constructor(){\n//         super({\n//             service: \"https://tiles.maps.eox.at/wms\",\n//             layerNames: \"s2cloudless-2018\",\n//             title: \"Sentinel Cloudless Layer\",\n//             sector: new Sector(-90, 90, -180, 180),\n//             levelZeroDelta: new Location(45, 45),\n//             numLevels: 19,\n//             format: \"image/jpg\",\n//             opacity: 1,\n//             size: 256,\n//             version: \"1.3.0\"\n//         });\n//     }\n// }\n\n// export default SentinelCloudlessLayer;\nconst {\n    Position,\n    RenderableLayer\n} = WorldWind;\n\nconst modelsLayer = new RenderableLayer('Model');\nfetch('./data/sentinel1/s1.json').then(response => {\n    return response.json();\n}).then(satelliteData => {\n    modelsLayer.addRenderable(new SatelliteModel(satelliteData, {\n        rotations: {\n            x: 0,\n            y: 0,\n            z: 0,\n            headingAxis: [0, 0, 1],\n            headingAdd: -90,\n            headingMultiply: 1\n        },\n        preRotations: {\n            x: 0,\n            y: 0,\n            z: 0\n        },\n        scale: 500000,\n        translations: {\n            x: -0.1,\n            y: -0.1,\n            z: 0\n        },\n        ignoreLocalTransforms: true\n    }, new Position(51, 14, 100000)));\n});\nexport default modelsLayer","import WorldWind from \"webworldwind-esa\";\n\nexport const bgLayers = [\n    {\n        service: \"https://tiles.maps.eox.at/wms\",\n        layerNames: \"s2cloudless-2018\",\n        title: \"s2cloudless-2018\",\n        numLevels: 19,\n        format: \"image/png\",\n        size: 256,\n        sector: WorldWind.Sector.FULL_SPHERE,\n        levelZeroDelta: new WorldWind.Location(90, 90)\n    },\n    {\n        service: \"https://tiles.esa.maps.eox.at/wms\",\n        layerNames: \"s2cloudless-2018\",\n        title: \"s2cloudless-2018 esa\",\n        numLevels: 19,\n        format: \"image/png\",\n        size: 256,\n        sector: WorldWind.Sector.FULL_SPHERE,\n        levelZeroDelta: new WorldWind.Location(90, 90)\n    },\n    {\n        service: \"https://tiles.esa.maps.eox.at/wms\",\n        layerNames: \"osm\",\n        title: \"osm\",\n        numLevels: 19,\n        format: \"image/png\",\n        size: 256,\n        sector: WorldWind.Sector.FULL_SPHERE,\n        levelZeroDelta: new WorldWind.Location(90, 90)\n    },\n    {\n        service: \"https://tiles.esa.maps.eox.at/wms\",\n        layerNames: \"terrain-light\",\n        title: \"terrain-light\",\n        numLevels: 19,\n        format: \"image/png\",\n        size: 256,\n        sector: WorldWind.Sector.FULL_SPHERE,\n        levelZeroDelta: new WorldWind.Location(90, 90)\n    },\n    {\n        service: \"https://tiles.maps.eox.at/wms\",\n        layerNames: \"terrain\",\n        title: \"terrain\",\n        numLevels: 19,\n        format: \"image/png\",\n        size: 256,\n        sector: WorldWind.Sector.FULL_SPHERE,\n        levelZeroDelta: new WorldWind.Location(90, 90)\n    }\n]\nexport const ovLayers = [\n\n    {\n        service: \"https://tiles.maps.eox.at/wms\",\n        layerNames: \"hydrography\",\n        title: \"hydrography\",\n        numLevels: 19,\n        format: \"image/png\",\n        size: 256,\n        sector: WorldWind.Sector.FULL_SPHERE,\n        levelZeroDelta: new WorldWind.Location(90, 90)\n    },\n    {\n        service: \"https://tiles.maps.eox.at/wms\",\n        layerNames: \"overlay_bright\",\n        title: \"overlay_bright\",\n        numLevels: 19,\n        format: \"image/png\",\n        size: 256,\n        sector: WorldWind.Sector.FULL_SPHERE,\n        levelZeroDelta: new WorldWind.Location(90, 90)\n    }\n]\n\n\n","import  { useState, useEffect, useRef } from \"react\";\nimport WorldWind from \"webworldwind-esa\";\nimport StarFieldLayer from \"./wwwx/layer/starfield/StarFieldLayer\"\nimport TexturedSurfacePolygon from './wwwx/shapes/TexturedSurfacePolygon'\nimport modelsLayer from './satelliteLayer';\nimport {bgLayers, ovLayers} from './layerConfig';\n\n\n// BasicWorldWindowController.prototype.applyLimits = function () {\n//     var navigator = this.wwd.navigator;\n\n//     // Clamp latitude to between -90 and +90, and normalize longitude to between -180 and +180.\n//     navigator.lookAtLocation.latitude = WWMath.clamp(navigator.lookAtLocation.latitude, -90, 90);\n//     navigator.lookAtLocation.longitude = Angle.normalizedDegreesLongitude(navigator.lookAtLocation.longitude);\n\n//     // Clamp range to values greater than 1 in order to prevent degenerating to a first-person navigator when\n//     // range is zero.\n//     navigator.range = WWMath.clamp(navigator.range, 1, Number.MAX_VALUE);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.heading = Angle.normalizedDegrees(navigator.heading);\n\n//     // Clamp tilt to between 0 and +90 to prevent the viewer from going upside down.\n//     navigator.tilt = WWMath.clamp(navigator.tilt, 0, 90);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.roll = Angle.normalizedDegrees(navigator.roll);\n\n//     // Apply 2D limits when the globe is 2D.\n//     if (this.wwd.globe.is2D() && navigator.enable2DLimits) {\n//         // Clamp range to prevent more than 360 degrees of visible longitude. Assumes a 45 degree horizontal\n//         // field of view.\n//         var maxRange = 2  Math.PI  this.wwd.globe.equatorialRadius;\n//         navigator.range = WWMath.clamp(navigator.range, 1, maxRange);\n\n//         // Force tilt to 0 when in 2D mode to keep the viewer looking straight down.\n//         navigator.tilt = 0;\n//     }\n// };\n\nexport function useEww({ id, clon, clat, alt, starfield, atmosphere, background, names, dem }) {\n    // console.log('useEww renders')\n    \n  \n    const eww = useRef(null)\n    const [projection, setProjection] = useState(\"3D\")\n    // const [aoi, setAoi] = useState({type: null, value: null})\n    const [aoi, setAoi] = useState('')\n    const [geojsonlayers, setGeojsonlayers] = useState([])\n    const [quicklooklayers, setQuicklooklayers] = useState([])\n    const [ewwstate, setEwwState] = useState({latitude: clat, longitude: clon, altitude: alt, aoi:'', pickedItems: []})\n    const copDemOn = useRef(dem)\n    const bgIndex = useRef(0)\n    const ovIndex = useRef(0)\n    const copdemlayer = useRef(0)\n    const nasademlayer = useRef(0)\n\n\n    // Turn the globe up north\n    function northUp() {\n        const wwd = eww.current\n        let headingIncrement = wwd.navigator.heading / -20;\n        let runOperation = () => {\n            if (Math.abs(wwd.navigator.heading) > Math.abs(headingIncrement)) {\n                wwd.navigator.heading += headingIncrement;\n                setTimeout(runOperation, 10);\n            } else {\n                wwd.navigator.heading = 0;\n            }\n            wwd.redraw();\n        };\n        setTimeout(runOperation, 10);\n    }\n\n    //toggle atmosphere\n    function toggleAtmosphere(bool) {\n        console.log('toggleAtmosphere: '+bool)\n        getLayerByName('Atmosphere').enabled = (bool!= null)?bool:!getLayerByName('Atmosphere').enabled\n        // getLayerByName('Atmosphere').enabled = bool\n        // console.log(eww.current.layers)\n        eww.current.redraw();\n    }\n    //toggle model\n    function toggleModel(bool) {\n        console.log('toggleModel: '+bool)\n        getLayerByName('Model').enabled = (bool!= null)?bool:!getLayerByName('Model').enabled\n        eww.current.redraw();\n    }\n\n    //toggle starField\n    function toggleStarfield(bool) {\n        console.log('toggleStarfield: '+bool)\n        getLayerByName('StarField').enabled = (bool!= null)?bool:!getLayerByName('StarField').enabled\n        eww.current.redraw();\n    }\n\n    //toggle name overlay\n    function toggleNames(bool) {\n        console.log('toggleNames: '+bool)\n        getLayerByName('overlay_bright').enabled = (bool!= null)?bool:!getLayerByName('overlay_bright').enabled\n        eww.current.redraw();\n    }\n    //toggle background overlay\n    function setBg(background) {\n        getLayerByName(background).enabled = true\n        eww.current.layers[bgIndex.current].enabled=false\n        eww.current.redraw();\n    }\n    function toggleBg() {\n        eww.current.layers[bgIndex.current].enabled=false\n\n        bgIndex.current = (bgIndex.current + 1)%bgLayers.length\n        console.log(\"Background Layer: \"+eww.current.layers[bgIndex.current].displayName)\n        eww.current.layers[bgIndex.current].enabled=true\n        eww.current.redraw();\n    }\n    function toggleOv() {\n        eww.current.layers[ovIndex.current+bgLayers.length].enabled=false\n\n        ovIndex.current = (ovIndex.current + 1)%ovLayers.length\n        console.log(\"Overlay Layer: \"+eww.current.layers[ovIndex.current+bgLayers.length].displayName)\n        eww.current.layers[ovIndex.current+bgLayers.length].enabled=true\n        eww.current.redraw()\n    }\n    \n    //toggle DEM \n    function toggleDem(dem) {\n        console.log(\"Copernicus Dem: \" + dem)\n        var elevationModel\n        if(!copDemOn.current) {\n            console.log('Switching to Copernicus Dem')\n            elevationModel = new WorldWind.ElevationModel();\n            elevationModel.addCoverage(new WorldWind.TiledElevationCoverage({\n                coverageSector: WorldWind.Sector.FULL_SPHERE,\n                resolution: 0.008333333333333,\n                retrievalImageFormat: \"image/tiff\",\n                minElevation: -11000,\n                maxElevation: 8850,\n                urlBuilder: new WorldWind.WcsTileUrlBuilder(\"https://dem.esa.maps.eox.at/elevation\", \"copdem\", \"2.0.1\")\n                }));    \n            \n        } else {\n            console.log('Switching to NASA Dem')\n            elevationModel = new WorldWind.EarthElevationModel()\n        }\n        eww.current.globe.elevationModel = elevationModel\n        eww.current.redraw();\n        copDemOn.current = !copDemOn.current\n        // setDemOn(copDemOn.current)\n    }\n\n \n    function  getViewPolygon () {\n        let view = eww.current.viewport\n        let area = {}\n        let polygon = ''\n        // console.log('view: ' + view.x + '/' + view.y + '/' + view.width + '/' + view.height);\n\n        let bl ;\n        try { \n            bl =  eww.current.pickTerrain(eww.current.canvasCoordinates(view.x, view.y + view.height)).terrainObject().position\n            bl.latitude = Math.round(bl.latitude * 10000)/10000\n            bl.longitude = Math.round(bl.longitude * 10000)/10000\n        }\n        catch(err) {bl = null;}\n\n\n        let tr ;\n        try { \n            tr = eww.current.pickTerrain(eww.current.canvasCoordinates(view.x + view.width, view.y)).terrainObject().position\n            tr.latitude = Math.round(tr.latitude * 10000)/10000\n            tr.longitude = Math.round(tr.longitude * 10000)/10000\n        }\n        catch(err) {tr = null;}\n\n        //console.log(bl.longitude+'/'+bl.latitude+'/'+tr.longitude+'/'+tr.latitude);\n        if(bl == null || tr == null )  {\n            //   area = {type:\"bbox\", value:\"-180,-90,180,90\"};\n              polygon = ''\n        } else {\n              area = {\n                    type: \"bbox\",\n                    value:\n                           bl.longitude +','\n                          + bl.latitude +','\n                          +tr.longitude +','\n                          +tr.latitude\n              };\n\n              polygon = 'POLYGON((' \n                + bl.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + bl.latitude + '))' \n        }\n        return polygon\n\n    }\n    \n    const addGeojson = (url,epoch) => {\n\n        // console.log('replace: '+replace)\n\n        function shapeConfigurationCallback(geometry, properties) {\n            let configuration = {};\n            configuration.userProperties = properties\n    \n            let placemarkAttributes = new WorldWind.PlacemarkAttributes(null);\n            placemarkAttributes.imageScale = 10;\n            placemarkAttributes.imageColor = new WorldWind.Color(0, 1, 1, 0.2);\n            placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(\n                WorldWind.OFFSET_FRACTION, 5,\n                WorldWind.OFFSET_FRACTION, 5);\n            //placemarkAttributes.imageSource = whiteDot;\n    \n    \n            if (geometry.isPointType() || geometry.isMultiPointType()) {\n                configuration.attributes = new WorldWind.PlacemarkAttributes(placemarkAttributes);\n                \n            } else if (geometry.isLineStringType() || geometry.isMultiLineStringType()) {\n                configuration.attributes.drawOutline = true;\n                configuration.attributes.outlineColor = new WorldWind.Color(\n                    0.1 * configuration.attributes.interiorColor.red,\n                    0.3 * configuration.attributes.interiorColor.green,\n                    0.7 * configuration.attributes.interiorColor.blue,\n                    1\n                );\n                configuration.attributes.outlineWidth = 1;\n            } else if (geometry.isPolygonType() || geometry.isMultiPolygonType()) {\n                configuration.attributes = new WorldWind.ShapeAttributes(null);\n                configuration.attributes.interiorColor = new WorldWind.Color(1, 0, 0, 0.2);\n                configuration.attributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.3);\n\n                configuration.highlightAttributes = new WorldWind.ShapeAttributes(configuration.attributes);\n                configuration.highlightAttributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.4);\n                configuration.highlightAttributes.interiorColor = new WorldWind.Color(1, 0, 0, 0);\n                // configuration.attributes.outlineWidth = 0.3;\n\n                // configuration.attributes.applyLighting = true;\n                // configuration.attributes.imageSource = properties.quicklookUrl\n\n            }\n    \n            //console.log(configuration.attributes);\n            return configuration;\n        }\n\n        \n        function loadCompleteCallback() {\n            console.log(renderableLayer)\n            setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n            enableRenderables(epoch) // uncomment to disable renderables\n            eww.current.redraw();\n        }\n    \n        // if (replace) removeGeojson()\n        let renderableLayer = new WorldWind.RenderableLayer('Products: '+url.properties.updated+Math.ceil(Math.random() * 10000))\n        \n        eww.current.addLayer(renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers(eww.current.layers)\n        let geoJson = new WorldWind.GeoJSONParser(url);\n        geoJson.load(loadCompleteCallback, shapeConfigurationCallback, renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])        \n    }\n\n    function removeGeojson() {\n        for(let i=0;i<geojsonlayers.length;i++) {\n          eww.current.removeLayer(geojsonlayers[i])\n        //   console.log('removing json layers: ')\n        //   console.log(geojsonlayers[i])\n        }\n        setGeojsonlayers((geojsonlayers)=>[])\n        // console.log(geojsonlayers)\n        eww.current.redraw();\n      }\n\n    function addWMS() {\n    }\n\n    function addQuicklookWMS(renderable) {\n\n        console.log(renderable.computeSectors(eww.current.drawContext))\n        console.log(WorldWind.Sector.FULL_SPHERE)\n\n        // for S2:  \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S2L1C_TRUE_COLOR&styles=&format=image/png&transparent=true&version=1.1.1&width=1500&height=1000&srs=EPSG:4326&bbox=12.357903,41.800495,12.625694,41.984760\n\n        \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S1B_IW_GRDH_1SDV_20190520T050758_20190520T050823_016323_01EB81_6EB6&styles=&format=image%2Fpng&transparent=true&version=1.1.1&width=256&height=256&srs=EPSG%3A3857&bbox=2035059.441064533,7044436.526761846,2191602.4749925737,7200979.560689885\n        let wmsConfigQL = {\n            service: \"https://view.onda-dias.eu/instance00/ows\",\n            // layerNames: renderable.userProperties.title,\n            // layerNames: 'S2L1C_TRUE_COLOR',\n            layerNames: 'S1_IW_GRDH_FullResolution',\n            \n            // title: renderable.userProperties.title,\n            title: 'quicklook',\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: renderable.computeSectors(eww.current.drawContext)[0],\n            // sector: renderable.sector,\n            // sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n\n        // let wmsConfigQL = {\n        //     service: \"https://tiles.maps.eox.at/wms\",\n        //     layerNames: \"overlay_bright\",\n        //     title: \"overlay_bright\",\n        //     numLevels: 19,\n        //     format: \"image/png\",\n        //     size: 256,\n        //     sector: WorldWind.Sector.FULL_SPHERE,\n        //     levelZeroDelta: new WorldWind.Location(90, 90)\n        // }\n        // eww.current.removeLayer(getLayerByName('quicklook') )\n        let qllayer =  new WorldWind.WmsLayer(wmsConfigQL, renderable.userProperties.date)\n        eww.current.addLayer(qllayer)\n        eww.current.redraw()\n        console.log(eww.current.layers)\n    }\n\n    function getLayerByName(name) {\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            // console.log('display name: '+eww.current.layers[i].displayName)\n            if (eww.current.layers[i].displayName === name) return eww.current.layers[i]\n        }\n        return null\n    }\n\n    async function enableRenderables(time) {\n        let timeOffset = 1000 * 60 * 60 * 3 // 3 hours\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            if (eww.current.layers[i].displayName.includes('Products:')) {\n                \n                for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                    let renderable = eww.current.layers[i].renderables[j]\n                    if (time != 0) {\n                        let renderableStartDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStartTime)).getTime()\n                        let renderableStopDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStopTime)).getTime()\n                        renderable.enabled = (renderableStartDate <= time+timeOffset/2 && renderableStopDate >= time-timeOffset/2) ? true : false   \n                    } else {\n                        renderable.enabled = false\n                    }         \n                }\n            }\n            if (eww.current.layers[i].displayName === 'quicklook') {\n                // eww.current.layers[i].enabled = \n            }\n        }\n\n    }\n\n    function addQuicklook(renderable) {\n\n        function imageLoader(url, useCredentials) {\n            return new Promise((resolve, reject) => {\n                const img = new Image();\n        \n                img.onload = function() {\n                    resolve(img);\n                };\n        \n                img.onerror = function(e){\n                    reject(e);\n                };\n        \n                img.crossOrigin = useCredentials ? 'Use-Credentials' : 'Anonymous';\n                img.src = url;\n                console.log(' adding QL')\n            });\n        }\n\n\n        // console.log(' adding QL')\n        //  console.log(renderable.attributes)\n        // let quicklook =  new TexturedSurfacePolygon(renderable.sector)\n        // let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n        // // quicklookLayer.addRenderable(quicklook)\n        // // setQuicklooklayers((quicklooklayers)=>[...quicklooklayers,quicklookLayer])\n        // // eww.current.addLayer(quicklookLayer)\n        // let ql = new Image()\n        // ql.src = renderable.userProperties.quicklookUrl\n        // quicklook.image = ql\n        \n        imageLoader(renderable.userProperties.quicklookUrl,true).then(image => {\n            let quicklookLayer = getLayerByName('Quicklooks')\n            removeQuicklooks()\n            let footprint = [\n                renderable.boundaries[0][0],\n                renderable.boundaries[0][3],\n                renderable.boundaries[0][2],\n                renderable.boundaries[0][1]\n            ]\n            // footprint[0].pop()\n            console.log(footprint)\n            let quicklook =  new TexturedSurfacePolygon(footprint,renderable.attributes)\n            quicklook.maxImageWidth = 64\n            quicklook.maxImageHeight = 64\n            \n            quicklook.image = image\n            quicklookLayer.addRenderable(quicklook)\n            eww.current.addLayer(quicklookLayer)\n            eww.current.redraw()\n        })\n    }\n\n    function removeQuicklooks() {\n        getLayerByName('Quicklooks').removeAllRenderables()\n        eww.current.redraw()\n    }\n\n    function setTime(epoch) {\n        getLayerByName('StarField').time = getLayerByName('Atmosphere').time = new Date(epoch)\n        enableRenderables(epoch)\n        eww.current.redraw();\n     }\n\n     function moveTo(clat, clon, alt) {\n        setTimeout(() => {\n            eww.current.goToAnimator.travelTime = 1000;\n            eww.current.goTo(new WorldWind.Position(clat, clon, alt));\n            eww.current.redraw();\n            }, 2000)\n        }\n\n\n    function toggleProjection() {\n        setProjection( prevProj => {\n          console.log(\"prevProjection: \"+prevProj)\n          let supportedProjections = [ \"3D\", \"Equirectangular\", \"Mercator\"];\n          let newProj = (supportedProjections.indexOf(prevProj) + 1)%supportedProjections.length\n          console.log(\"newProjection: \"+supportedProjections[newProj])\n          switch (supportedProjections[newProj]) {\n            case \"3D\":\n                eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n                break;\n            case \"Equirectangular\":\n                eww.current.globe.projection = new WorldWind.ProjectionEquirectangular();\n                break;\n            case \"Mercator\":\n                eww.current.globe.projection = new WorldWind.ProjectionMercator();\n                break;\n            case \"North Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"North\");\n                break;\n            case \"South Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"South\");\n                break;\n            default:\n            eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n            }\n          eww.current.redraw();\n          return supportedProjections[newProj]\n          })      \n      }\n\n    // callback from eww   \n    const setGlobeStates = () => {\n        \n        let lo = eww.current.navigator.lookAtLocation.longitude\n        let la = eww.current.navigator.lookAtLocation.latitude\n        let al = eww.current.navigator.range\n        let vp = (al < 2000000?getViewPolygon():'')\n\n        setEwwState((ewwstate) => { return {...ewwstate, longitude:lo, latitude: la, altitude: al, viewpolygon: vp}}) \n\n    }\n\n    // handler for tap/click\n\n    const handleClick  = (recognizer) => {\n        console.log('click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        // Perform the pick. Must first convert from window coordinates to canvas coordinates, which are\n        // relative to the upper left corner of the canvas rather than the upper left corner of the page.\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n        // console.log(pickList)\n        if (pickList.terrainObject()) {\n            // position = pickList.terrainObject().position;\n            // store list of selected footprints in a string for later comparison\n            eww.current.removeLayer(getLayerByName('quicklook') )\n            // de-highlight all rendereables\n            for (let i = 0; i < eww.current.layers.length; i++) {\n                if (eww.current.layers[i].displayName.includes('Products:')) {                    \n                    for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                        let renderable = eww.current.layers[i].renderables[j]\n                        renderable.highlighted = false\n                    }\n                }\n            }\n    \n            // ... and now highlight all picked rendereables\n            let pickedItems = []\n            for (let i = 0; i < pickList.objects.length; i++) {\n                if (pickList.objects[i].userObject instanceof WorldWind.SurfaceShape) {\n                    pickedItems.push(pickList.objects[i].userObject) \n                    pickList.objects[i].userObject.highlighted = !pickList.objects[i].userObject.highlighted\n                    \n                    addQuicklookWMS(pickList.objects[i].userObject)\n                }\n            }\n            // console.log(pickedItems)\n            setEwwState((ewwstate) => { return {...ewwstate, pickedItems: pickedItems}})\n            eww.current.redraw()\n        } else {\n            console.log('No position !');\n            return;\n        }\n\n\n    }\n    const handleDoubleClick  = (recognizer) => {\n        console.log('double click')\n        northUp()\n    }\n\n    const handleDoubleClick2  = (recognizer) => {\n        console.log('double click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n\n        let position;\n  \n  \n        // Get coordinates of clicked point and list of selected footprints. Do nothing if click done outside the globe.\n        if (pickList.terrainObject()) {\n            position = pickList.terrainObject().position;\n            // eww.current.goTo(new WorldWind.Location(position.latitude, position.longitude));\n\n            let point = \"POINT(\"+position.longitude+' '+position.latitude+\")\"\n            \n            setEwwState((ewwstate) => { return {...ewwstate, aoi: point}}) \n    \n        } else {\n              console.log('No position !');\n              setEwwState((ewwstate) => { return {...ewwstate, aoi: ''}})\n        }\n    }\n\n\n    // didMount effect\n    useEffect(() => {\n        console.log(\"Creating the world...\")\n\n        // to use DEM from Eox ESA Map server\n        var elevationModel = new WorldWind.ElevationModel();\n        elevationModel.removeAllCoverages()\n        elevationModel.addCoverage(new WorldWind.TiledElevationCoverage({\n            coverageSector: WorldWind.Sector.FULL_SPHERE,\n            resolution: 0.008333333333333,\n            retrievalImageFormat: \"image/tiff\",\n            minElevation: -11000,\n            maxElevation: 8850,\n            urlBuilder: new WorldWind.WcsTileUrlBuilder(\"https://dem.esa.maps.eox.at/elevation\", \"copdem\", \"2.0.1\")\n            }));\n        // eww.current = new WorldWind.WorldWindow(id, elevationModel);\n\n\n        eww.current = new WorldWind.WorldWindow(id);\n        eww.current.redrawCallbacks.push(setGlobeStates)\n\n        // Define a min/max altitude limit\n        WorldWind.BasicWorldWindowController.prototype.applyLimits = function () {\n            eww.current.navigator.range = WorldWind.WWMath.clamp(eww.current.navigator.range, 2000, 300000000);\n        }\n\n        // define click/tap recognisers\n\n        let appDoubleClickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleDoubleClick);\n        appDoubleClickRecognizer.numberOfClicks = 2;\n        appDoubleClickRecognizer.maxClickInterval = 200;\n        eww.current.worldWindowController.clickDownRecognizer.recognizeSimultaneouslyWith(appDoubleClickRecognizer);\n        \n        // turning this block on will cause double drag to not be recognized anymore....\n        // let appClickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleClick);\n        // appClickRecognizer.numberOfClicks = 1;\n        // eww.current.worldWindowController.clickDownRecognizer.recognizeSimultaneouslyWith(appClickRecognizer);\n        // appDoubleClickRecognizer.recognizeSimultaneouslyWith(appClickRecognizer);\n        // appClickRecognizer.requireRecognizerToFail(appDoubleClickRecognizer)\n\n\n        let appDoubleTapRecognizer = new WorldWind.TapRecognizer(eww.current, handleDoubleClick);\n        appDoubleTapRecognizer.numberOfTaps = 2;\n        appDoubleTapRecognizer.name = 'double tap';\n        eww.current.worldWindowController.tapDownRecognizer.recognizeSimultaneouslyWith(appDoubleTapRecognizer);\n\n        // // next 2 lines: marche pas...\n        // eww.current.worldWindowController.panRecognizer.recognizeSimultaneouslyWith(appDoubleTapRecognizer);\n        // eww.current.worldWindowController.doublePanRecognizer.recognizeSimultaneouslyWith(appDoubleTapRecognizer);\n \n        // tapRecognizer.recognizeSimultaneouslyWith(doubleTapRecognizer);\n        // doubleTapRecognizer.requireRecognizerToFail(tapRecognizer)\n\n        WorldWind.configuration.baseUrl = WorldWind.configuration.baseUrl.slice(0,-3)\n\n        //let starFieldLayer = new WorldWindX.StarFieldLayer();\n        // let starFieldLayer = new WorldWind.StarFieldLayer();\n        let starFieldLayer = new StarFieldLayer();\n        let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_01deg.jpg');\n        // let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_3km.jpg');\n        \n        //atmosphereLayer.minActiveAltitude = 5000000\n\n        let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n    \n        let layers = [\n            // { layer: new WorldWind.WmsLayer(wmsConfigBg_s2, \"\"), enabled: true },\n            // { layer: new WorldWind.WmsLayer(wmsConfigBg_terrain, \"\"), enabled: false },\n            // { layer: new WorldWind.WmsLayer(wmsConfigNames, \"\"), enabled: names },\n            { layer: starFieldLayer, enabled: starfield },\n            { layer: atmosphereLayer, enabled: atmosphere },\n            { layer: quicklookLayer, enabled: true },\n            { layer: modelsLayer, enabled: false }\n        ];\n    \n        for (let l = 0; l < bgLayers.length; l++) {\n            let layer = new WorldWind.WmsLayer(bgLayers[l], \"\")\n            layer.enabled = false\n            eww.current.addLayer(layer, \"\")\n        }\n        for (let l = 0; l < ovLayers.length; l++) {\n            let layer = new WorldWind.WmsLayer(ovLayers[l], \"\")\n            layer.enabled = false\n            eww.current.addLayer(layer, \"\")\n        }\n\n        for (let l = 0; l < layers.length; l++) {\n            layers[l].layer.enabled = layers[l].enabled;\n            eww.current.addLayer(layers[l].layer);\n        }\n        console.log(eww.current.layers)\n        //let date = new Date();\n        starFieldLayer.time = new Date();\n        atmosphereLayer.time = new Date();\n        moveTo(clat, clon, alt) \n        // setTimeout(() => {\n        //     eww.current.goToAnimator.travelTime = 1000;\n        //     eww.current.goTo(new WorldWind.Position(clat, clon, alt));\n        //     eww.current.redraw();\n        //     }, 2000)\n    \n        eww.current.redraw();\n        eww.current.deepPicking = true;\n        // eww.current.orderedRenderingFilters.push(declutterByTime)\n    }, []); // effect runs only once\n        \n      // useEffect(() => {\n    //     console.log(\"useEffect aoi: \" + aoi)\n    //     let newewwstate = {...ewwstate, aoi: aoi}\n    //     setEwwState(newewwstate)\n    // }, [aoi]); \n    useEffect(() => {\n        toggleBg()\n    }, [background]);\n\n    useEffect(() => {\n        toggleNames(names)\n    }, [names]);\n\n    useEffect(() => {\n        toggleAtmosphere(atmosphere)\n    }, [atmosphere]);\n\n    useEffect(() => {\n        toggleStarfield(starfield)\n    }, [starfield]);\n\n    useEffect(() => {\n        toggleDem(dem)\n    }, [dem]); \n\n  return { ewwstate, moveTo, removeGeojson, addGeojson, addWMS, toggleStarfield, toggleAtmosphere, setTime, toggleProjection, toggleNames, toggleModel, toggleBg, toggleOv, toggleDem, northUp };\n}\n","import React, {useEffect, useState, useGlobal } from 'reactn';\nimport './Earth.css'\nimport { useEww } from \"./useEww\"\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n\n\n\n\n\nfunction Earth({ viewdate, id, clat, clon, alt }) {\n\n    const [mapSettings, setMapSettings] = useGlobal('mapSettings')\n\n    const [mapSet, setMapSet] = useState(mapSettings)\n\n\n    const {\n        ewwstate,\n        moveTo,\n        addGeojson,\n        removeGeojson,\n        addWMS,\n        toggleProjection,\n        toggleOv,\n        toggleModel,\n        setTime,\n        toggleDem,\n        northUp\n    } = useEww({\n        id: id,\n        clat: clat,\n        clon: clon,\n        alt: alt,\n        starfield: mapSettings.starfield,\n        atmosphere: mapSettings.atmosphere,\n        background: mapSettings.background,\n        names: mapSettings.names,\n        dem: mapSettings.dem\n    })\n\n    useHotkeys(\"p\",toggleProjection)  \n    useHotkeys(\"c\",removeGeojson)\n    useHotkeys(\"u\",northUp)\n    useHotkeys(\"b\",() => setMapSet((mapSet)=>({...mapSet, background:Math.random()})))  \n    useHotkeys(\"m\",toggleModel)\n    useHotkeys(\"d\",() => setMapSet((mapSet)=>({...mapSet, dem:!mapSet.dem})))  \n    useHotkeys(\"o\",toggleOv)\n    useHotkeys(\"a\",() => setMapSet((mapSet)=>({...mapSet, atmosphere:!mapSet.atmosphere})))  \n    useHotkeys(\"s\",() => setMapSet((mapSet)=>({...mapSet, starfield:!mapSet.starfield})))  \n    useHotkeys(\"n\",() => setMapSet((mapSet)=>({...mapSet, names:!mapSet.names})))  \n\n    // useHotkeys(\"a\",(mapSettings) => setMapSettings({...mapSettings, atmosphere:!mapSettings.atmosphere}))\n\n    // const toggleAtmosphere = () => setMapSettings((mapSettings)=>({...mapSettings, atmosphere:!mapSettings.atmosphere}))\n    // const toggleStarfield = () => setMapSettings((mapSettings)=>({...mapSettings, starfield:!mapSettings.starfield}))\n    // const toggleNames = () => setMapSettings((mapSettings)=>({...mapSettings, names:!mapSettings.names}))\n    // const toggleBg = () => setMapSettings((mapSettings)=>({...mapSettings, background:Math.random()}))\n\n\n\n    useEffect(() => {\n        setTime(viewdate.getTime())\n    },[viewdate])\n\n    useEffect(() => {\n        setMapSettings(mapSet)\n    }, [mapSet]);\n\n    useEffect(() => {\n        setMapSet(mapSettings)\n    }, [mapSettings]);\n\n\n    let globeStyle = {\n        background: 'black',\n        position: \"fixed\",\n        left: 0,\n        width: '100%',\n        height: '100%'\n    };\n        \n    return (\n            <canvas id={id} style={globeStyle} />\n    );\n}\n\nexport default Earth\n","import React from 'react';\nimport dateFormat from \"dateformat\"\nimport './DateLabelCard.css';\n\nfunction DateLabel({date, highlight, animated}) {\n\n    return (\n        <div className='LabelContainer' >\n            <hi className={highlight ==='year'?'Highlighted':''}>{date.getUTCFullYear()}</hi>-\n            <hi className={highlight ==='month'?'Highlighted':''}>{dateFormat(date,'UTC:mmm').toUpperCase()}</hi>-\n            <hi className={highlight ==='day'?'Highlighted':''}>{dateFormat(date,'UTC:dd')}</hi>&nbsp;/&nbsp;\n            <hi className={highlight ==='hour'?'Highlighted':''}>{dateFormat(date,'UTC:HH')}</hi>:\n            <hi className={highlight ==='minute'?'Highlighted':''}>{dateFormat(date,'UTC:MM')}</hi>:\n            <hi className={highlight ==='second'?'Highlighted':''}>{dateFormat(date,'UTC:ss')}</hi>  \n        </div>\n    )\n}\nexport default DateLabel\n","import { useState, useEffect, useRef } from \"react\";\n\n\nexport function useClock({ autoStart, initdate }) {\n    // console.log('useClock renders')\n    //const { autoStart, duration } = settings || {};\n  \n    // let initDate = startdate\n    const [date, setDate] = useState(initdate)\n    // const [playing, setPlaying] = useState(false)\n    // const [stepstate, setStepstate] = useState(1000*60*60)\n    // const [refreshrate, setrefreshrate] = useState(200)\n    const playing = useRef()\n    const step = useRef() \n    const refreshrate = useRef() \n    refreshrate.current = 200\n    // step.current = refreshrate.current\n    \n    const ldate = useRef()\n\n      // Control functions\n    const intervalRef = useRef()\n    const timeoutRef = useRef()\n    \n\n    // function increaseSpeed() {\n    //     setStep ( () => {\n    //         let newstate = (step > 0)? step * 2:step / 2\n    //         if(Math.abs(newstate) < refreshrate) newstate = refreshrate\n    //         return newstate\n    //     })\n    // }\n    // function decreaseSpeed() {\n    //     setStep (() => {\n    //         let newstate = (step > 0)? step / 2:step * 2\n    //         if(Math.abs(newstate) < refreshrate) newstate = refreshrate\n    //         return newstate\n    //     })\n    // }\n    function increaseSpeed() {\n        // stop()\n        step.current = (step.current > 0)? step.current *= 2:step.current /= 2\n        if(Math.abs(step.current) < refreshrate.current) step.current = refreshrate.current\n        console.log('step: '+step.current)\n        // setStepstate((st)=>st*2)\n        // start()\n    }\n    function decreaseSpeed() {\n        step.current = (step.current > 0)? step.current /= 2:step.current *= 2\n        if(Math.abs(step.current) < refreshrate.current) step.current = -1 * refreshrate.current\n        console.log('step: '+step.current)\n        // setStepstate((st)=>st/2)\n    }\n\n    function togglePause() {\n        if (playing.current) {\n            stop()\n        } else {\n            start()\n        }\n    }\n    \n    function start() {\n        console.log('start clock')\n        if(!step.current) step.current = refreshrate.current\n        if (!playing.current) {\n            intervalRef.current = setInterval( ()=>{\n                ldate.current += step.current\n                setDate(new Date(ldate.current))\n            },refreshrate.current)\n        }\n        playing.current = true\n    }\n    \n    function stop() {\n        console.log('stop clock')\n        if(timeoutRef.current) clearTimeout(timeoutRef.current)\n        if (intervalRef.current) clearInterval(intervalRef.current)\n        playing.current = false\n    }\n    \n\n    function reset() {\n        ldate.current = new Date().getTime()\n        setDate(new Date(ldate.current))\n\n    }\n\n     \n    function forceDate(newdate) {\n        console.log('forcedate useclock: '+newdate.toJSON())\n        ldate.current = newdate.getTime()\n    }\n\n    useEffect(() => {\n        console.log('init start useclock '+initdate.toJSON())\n        ldate.current = initdate.getTime()\n    }, [initdate])\n\n\n\n    // didMount effect\n    useEffect(() => {\n        console.log('render useclock')\n        // setDate((new Date()).getTime())\n        ldate.current = new Date().getTime()\n        if (autoStart) {\n            start();\n        }\n        //return reset;\n    }, [autoStart]);\n\n  \n  return { date, playing, togglePause, reset, increaseSpeed, decreaseSpeed, forceDate };\n}\n","import React, {useEffect, useState} from 'react';\nimport { useClock } from \"./useClock\"\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n\nimport './DateController.css';\n\nfunction DateController({startdate, onDateChange}) {\n\n    // useClock must be redone to support real time increments\n    const {\n        date,\n        // playing,\n        togglePause,\n        reset,\n        increaseSpeed,\n        decreaseSpeed,\n        // forceDate\n    } = useClock({\n        autoStart: false,\n        initdate: startdate\n    })\n\n\n\n    useHotkeys(\"t\",togglePause)\n    useHotkeys(\"r\",()=>{reset() })\n    useHotkeys(\".\",increaseSpeed)\n    useHotkeys(\",\",decreaseSpeed)\n\n    \n\n\n    useEffect(() => {\n        // console.log(\"date from useClock: \"+new Date(date).toJSON())\n        onDateChange(date)\n        //forceDate(date)\n        //setAppdate({appdate: new Date(date)})\n    },[date]);\n\n    // useEffect(() => {\n    //     // console.log(\"date from datemanager: \"+new Date(date).toJSON())\n    //     // forceDate(startdate)\n    //     //forceDate(date)\n    //     //setAppdate({appdate: new Date(date)})\n    // },[startdate]);\n\n    const [lastTap, setLasttap] = useState()\n    const handleDoubleTap = () => {\n        const now = Date.now();\n        if (lastTap && (now - lastTap) < 400) {\n          reset();\n        } else {\n            setLasttap(now)\n            togglePause()\n        }\n      }\n\n\n    return (\n        <div className='DateController' onClick={handleDoubleTap}/>\n    )\n}\nexport default DateController\n","import React, {useState, useEffect,useLayoutEffect, useRef} from 'react';\nimport {useSpring, animated} from 'react-spring'\nimport './DateSelector.css';\n\nfunction DateSelectorScale({date, zoomfactor,  step}) {\n\n    const scale = useRef()\n    const [opacity, setOpacity] = useState(1)    \n    const [active, setActive] = useState(false)    \n    const [timescale, setTimescale] = useState('')    \n    // const [zoom, setZoom] = useState(zoomfactor)    \n\n\n    useEffect(() => {  \n        return () => {}          \n    })\n        \n    const scaleText = (_start, _zoom) => {\n        // console.log('_start: '+_start.toJSON()+'  zoom: '+_zoom)\n        if(!scale.current) return\n            \n        const monthcode = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']\n        const YEAR_LEVEL = 1000*60*60*24*30*3\n        const MONTH4_LEVEL = 1000*60*60*24*4\n        const MONTH_LEVEL = 1000*60*60*24*2\n        const DAY5_LEVEL = 1000*60*60*8\n        const DAY_LEVEL = 1000*60*70\n        const HOUR3_LEVEL = 1000*60*7\n        const HOUR_LEVEL = 1000*60*3\n        const MIN10_LEVEL = 1000*40\n        const MIN_LEVEL = 1000*2\n\n        function pad(number, length) {  \n            var str = '' + number;\n            while (str.length < length) {\n                str = '0' + str;\n            }           \n            return str;        \n        }\n\n\n        let day, month, hour, year, minute = 0\n        let lastday =0\n        let lastmonth = 0\n        let lastyear = 0\n        let lasthour = 0\n        let lastminute = 0\n        let tics = []    \n\n        for ( let i=0 ; i < scale.current.offsetHeight ; i+=1 ) {\n            let refdate = new Date( (i- scale.current.offsetHeight/2) * _zoom + _start.getTime()  )\n            day = refdate.getUTCDate()\n            month = refdate.getUTCMonth()\n            hour = refdate.getUTCHours()\n            year = refdate.getUTCFullYear()\n            minute = refdate.getUTCMinutes()\n\n            switch (true) {\n                case _zoom < MIN_LEVEL:\n                    if(minute !== lastminute) {\n                        if (minute !== 0 || hour !== 0) {\n                            tics.push({class:'HourTic', pos: i, label: pad(hour,2)+':'+pad(minute,2)})\n                        } else {\n                            if (minute === 0 && hour === 0) {\n                                tics.push({class:'DayTic_h', pos: i, label: day})\n                                tics.push({class:'MonthTic_h2', pos: i, label: monthcode[month]})\n                                //tics.push({class:'YearTic_h', pos: i, label: year})\n                            }     \n                        }\n                    }\n                break\n\n                case _zoom < MIN10_LEVEL:\n                    if(minute !== lastminute) {\n                        if( (minute !== 0 || hour !=0) && minute % 10 === 0) {\n                            tics.push({class:'HourTic', pos: i, label: pad(hour,2)+':'+pad(minute,2)})\n                        } else {\n                            if (minute === 0 && hour === 0) {\n                                tics.push({class:'DayTic_h', pos: i, label: day})\n                                tics.push({class:'MonthTic_h2', pos: i, label: monthcode[month]})\n                                //tics.push({class:'YearTic_h', pos: i, label: year})\n                            }     \n                        }\n                    }\n                break\n\n                case _zoom < HOUR_LEVEL:\n                    if(hour !== lasthour) {\n                        if (hour !== 0) {\n                            tics.push({class:'HourTic', pos: i, label: pad(hour,2)+':00'})\n                        \n                        } else  {\n                            tics.push({class:'DayTic_h', pos: i, label: day})\n                            tics.push({class:'MonthTic_h2', pos: i, label: monthcode[month]})\n                            // tics.push({class:'YearTic_h', pos: i, label: year})            \n                        }\n                    }\n                break\n\n                case _zoom < HOUR3_LEVEL:\n                    if(hour !== lasthour) {\n                        if (hour !== 0 &&  (hour % 3 === 0 )) {\n                            tics.push({class:'HourTic', pos: i, label: pad(hour,2)+':00'})\n                        } else  {\n                            if (hour === 0) {\n                                tics.push({class:'DayTic_h', pos: i, label: day})\n                                tics.push({class:'MonthTic_h2', pos: i, label: monthcode[month]})\n                                // tics.push({class:'YearTic_h', pos: i, label: year})            \n                            }\n                        }\n                    }    \n                break\n\n                case _zoom < DAY_LEVEL:\n                    if(day !== lastday) {\n                        if ( day !== 1 ) {\n                            tics.push({class:'DayTic', pos: i, label: day})\n                        } else {\n                            tics.push({class:'MonthTic_h', pos: i, label: monthcode[month]})\n                            if (month === 0) tics.push({class:'YearTic_h2', pos: i, label: year})\n                            // tics.push({class:'YearTic_h2', pos: i, label: year})\n                         }\n                        \n                    }    \n                break\n\n                case _zoom < DAY5_LEVEL:\n                    if(day !== lastday) {\n                        if ( day !== 1 && day !== 30 && day % 5 === 0 ) {\n                            tics.push({class:'DayTic', pos: i, label: day})\n                        } else {\n                            if (day == 1) {\n                                // tics.push({class:'DayTic', pos: i, label: day})\n                                tics.push({class:'MonthTic_h', pos: i, label: monthcode[month]})\n                                if (month === 0) tics.push({class:'YearTic_h2', pos: i, label: year})\n                                // tics.push({class:'YearTic_h2', pos: i, label: year})\n                            }\n                         }\n                        \n                    }    \n\n                break\n\n                case _zoom < MONTH_LEVEL:\n                    if( month !== lastmonth ) {\n                        if (month !== 0) {\n                            tics.push({class:'MonthTic', pos: i, label: monthcode[month]})\n                        } else {\n                            tics.push({class:'MonthTic_h', pos: i, label: monthcode[month]})\n                            tics.push({class:'YearTic_h2', pos: i, label: year})\n                        }\n                    }\n    \n                break\n\n                case _zoom < MONTH4_LEVEL:\n                    if( month !== lastmonth ) {\n                        if (month !== 0 && month !== 11 && (month) % 3 === 0 ) {\n                            tics.push({class:'MonthTic', pos: i, label: monthcode[month]})\n                        } else {\n                            if (month == 0) {\n                                tics.push({class:'MonthTic_h', pos: i, label: monthcode[month]})\n                                tics.push({class:'YearTic_h2', pos: i, label: year})\n                            }\n                        }\n                    }\n    \n                break\n\n                case _zoom < YEAR_LEVEL:\n                    if(year !== lastyear ) {\n                        if (month !== 0) {\n                            tics.push({class:'MonthTic', pos: i, label: monthcode[month]})\n                        } else {\n                            // tics.push({class:'MonthTic', pos: i, label: month})\n                            tics.push({class:'YearTic', pos: i, label: year})\n                        }\n                    }\n    \n                break\n\n                default:\n                break\n            }\n            lastday = day\n            lastyear = year\n            lastmonth = month\n            lasthour = hour\n            lastminute = minute\n        }\n      \n        return tics.map(item => ( <animated.div className={item.class} key={item.class+item.pos} style={{top:item.pos,opacity:opacity}}>{item.label}</animated.div>))\n    }\n\n\n    // useLayoutEffect(() => {\n    //     setTimescale(scaleText(date,zoomfactor))\n    // },[date,zoomfactor])\n\n\n    useLayoutEffect(() => {\n        // console.log('zoomfactor / date: '+zoomfactor + '/ ' + date)\n        setTimescale(scaleText(date,zoomfactor))\n    },[ zoomfactor,date])\n\n    // const [{ opaciter }, setOpaciter] = useSpring( () => ({ opaciter: 0}) )\n    useEffect(() => {\n\n        console.log('step changed to: '+step)\n        // //if (Math.abs(zoomfactor-1000*60*60*24)< 1000*60*60*24) zoom = 1000*60*60*24\n        // setOpaciter({ \n        //     to: {\n        //         opaciter: 1\n        //     },\n        //     config: {  duration: 1000, resolution: 0.01,decay: true},\n        //     immediate: false,\n        //     onFrame: ()=>{\n        //         console.log('opacity:'+opaciter.value)\n        //         // setTimescale(scaleText(new Date(dater.value),zoomer.value))\n        //         setOpacity(opaciter.value)\n        //     }\n        // })\n\n    },[step])\n\n\n\n    return (\n        <animated.div ref={scale} className='DateSelectorScale' >\n            {timescale}\n        </animated.div>\n    )\n}\nexport default DateSelectorScale\n","import React, {useState, useEffect, useRef} from 'react'\nimport {useSpring, animated} from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport { scale } from 'vec-la'\nimport DateSelectorScale from './DateSelectorScale'\n\nimport './DateSelector.css';\n// import { start } from 'repl';\n\nfunction DateSelector({startdate, onDateChange, onFinalDateChange, onStepChange}) {\n\n    const MAXZOOM = 1000*60*60*24*15\n    const MINZOOM = 1000\n    const DEFZOOM = 1000*60*60\n    const ZOOMDIR = -1\n    \n    const selector = useRef()\n    const lastZoom = useRef()\n    const lastPos = useRef()\n    if(!lastZoom.current) lastZoom.current = DEFZOOM\n    if(!lastPos.current) lastPos.current = 0\n\n    \n    const [scaledate, setScaledate ] = useState(startdate)\n    // const debouncedScaledate = useDebounce(scaledate, 10);\n\n    const [lastStartdate, setlLastStartdate ] = useState(startdate)\n    \n    const [active, setActive ] = useState(false)\n    const [step, setStep ] = useState(60000)\n    const [stepLabel, setStepLabel ] = useState('hour')\n\n    // zoomfactor: how long is a pixel in ms\n    const [zoomfactor, setZoomfactor ] = useState(DEFZOOM)\n    if (!lastZoom.current) lastZoom.current = DEFZOOM\n\n    // to detect double taps\n    const lastTap = useRef()\n    const doubleTap = useRef()\n\n\n    const handleDoubleTap = () => {\n        const now = Date.now();\n        if (lastTap.current && (now - lastTap.current) < 300  && !active) {\n            doubleTap.current = true\n        } else {\n            lastTap.current = now\n            doubleTap.current = false\n        }\n    }\n\n\n    const [{ posxy_drag}, setyOnDrag] = useSpring(() => ({ posxy_drag: [0,0]  }))\n    const [{ xy2 }, sety2] = useSpring(() => ({ xy2: [0,0] }))\n    const [{ posy_wheel }, setyOnWheel] = useSpring(() => ({posy_wheel: 0 }))\n    // const [{ zoom }, setz] = useSpring(() => ({ zoom: DEFZOOM }))\n\n\n    \n    const bind = useGesture({\n\n        onDragEnd: () => {\n                lastZoom.current = zoomfactor\n        },\n\n        onWheel: ( {delta, first, down, direction, velocity, xy, movement, memo = posy_wheel.getValue() } ) => {\n            // console.log(down)\n            // console.log(first)\n            setyOnWheel({                 \n                posy_wheel: movement[1] + lastPos.current, \n                immediate: false, \n                config: { },\n                onFrame: ()=>{\n                    // console.log('y / posy / movement / memo:  '+xy[1]+'/ '+posy_wheel.getValue()+'/ '+movement[1]+'/ '+lastPos.current)\n                    if (!first) {\n                        // let newdate = new Date(lastStartdate.getTime() + Math.ceil(posy_wheel.getValue() * zoomfactor  / step) * step)\n                        let newdate = new Date(lastStartdate.getTime() + Math.ceil(movement[1] * zoomfactor  / step) * step) \n                        setScaledate(newdate)\n                        onDateChange(newdate)\n                        }\n                        lastPos.current = posy_wheel.getValue()\n\n                    // setlLastStartdate(newdate)\n                },\n                onRest: ()=>{\n                    if (!down) {\n                        setActive(false)\n                        let newdate = new Date(lastStartdate.getTime() + Math.ceil(posy_wheel.getValue() * zoomfactor  / step) * step) \n                        onFinalDateChange(newdate)\n                        setlLastStartdate(newdate)\n                        lastPos.current=0\n                    }\n                }\n            })\n        return memo\n        },\n\n        onDrag: ({  event, active, first, down, touches, delta, velocity, direction, shiftKey, xy, movement, temp = {\n            lastzoom: zoomfactor,\n            lastdelta: [0,0],\n            currentzoom: zoomfactor\n            }\n        }) => {\n            //event.preventDefault()\n            let zoom\n            if (first) {\n                setActive(true)\n                handleDoubleTap()\n                setlLastStartdate(scaledate)\n                lastPos.current = 0\n                \n            }\n\n            if (doubleTap.current || shiftKey) {\n                zoom = temp.currentzoom + temp.currentzoom / 50 *  delta[1] * ZOOMDIR\n                if (zoom < MINZOOM) zoom = MINZOOM\n                if (zoom > MAXZOOM) zoom = MAXZOOM\n                setZoomfactor(zoom)\n                // temp.xy = [0,0]\n                temp.currentzoom = zoom\n                temp.lastdelta = delta\n                if(!down) setActive(false)\n                return temp\n            }\n            velocity = (Math.abs(velocity)<.2)?0:velocity  \n\n            setyOnDrag({                 \n                posxy_drag:  movement,\n                immediate: (active), \n                config: { velocity: scale(direction, velocity), decay: true},\n                onFrame: ()=>{\n                    // console.log('y / movement / delta:  '+xy[1]+'/ '+movement[1]+'/ '+delta[1])\n                    if (!first) {\n                        let newdate = new Date(lastStartdate.getTime() - Math.ceil(posxy_drag.getValue()[1] * zoomfactor  / step) * step) \n                        setScaledate(newdate)\n                        onDateChange(newdate)\n                        }\n\n                    // setlLastStartdate(newdate)\n                },\n                onRest: ()=>{\n                    if (!down) {\n                        setActive(false)\n                        let newdate = new Date(lastStartdate.getTime() - Math.ceil(posxy_drag.getValue()[1] * zoomfactor  / step) * step) \n                        onFinalDateChange(newdate)\n                        setlLastStartdate(newdate)\n                    }\n                }\n            })\n            return temp\n        }\n    },\n    {reset: true,drag: {useTouch: true} }\n    )\n\n\n    const moveToDate = (startdate) => {\n        if (!active) {\n            let deltaoffset = [0,(lastStartdate.getTime() - startdate.getTime())  / zoomfactor]\n            \n            sety2({ \n                xy2: deltaoffset,\n                immediate: false, \n                config: {reset: true, config: {duration: 200} },\n                onFrame: ()=>{\n                    let newdate = new Date(lastStartdate.getTime() - xy2.getValue()[1] * zoomfactor)\n                    setScaledate(newdate)\n                    onDateChange(newdate)\n                },\n                onRest: ()=>{\n                    // setActive(false)\n                    let newdate = new Date(lastStartdate.getTime() - xy2.getValue()[1] * zoomfactor)\n                    xy2.setValue([0,0])\n                    setScaledate(newdate)\n                    setlLastStartdate(newdate)\n                }\n            })\n        }\n\n    }\n\n    useEffect(() => {\n        // console.log('startdate changed')\n        if(!active) {\n            moveToDate(startdate)\n        }\n    },[startdate])\n\n    // useEffect(() => {\n    //     console.log('laststartdate changed: '+lastStartdate.toJSON())\n    // },[lastStartdate])\n\n    useEffect(() => {\n        console.log('Selector active: '+active)\n    },[active])\n\n\n    useEffect(() => {\n        onStepChange(stepLabel)\n    },[stepLabel])\n\n    useEffect(() => {\n        switch (true) {\n            case zoomfactor > 120426316:\n                setStep(1000*60*60*24*30)\n                setStepLabel('month')\n                break\n            case zoomfactor > 14544702:\n                setStep(1000*60*60*24)\n                setStepLabel('day')\n                break\n            case zoomfactor > 735259:\n                setStep(1000*60*60)\n                setStepLabel('hour')\n                break\n            case zoomfactor > 32274:\n                setStep(1000*60)\n                setStepLabel('minute')\n                break\n            default:\n                setStep(1000)\n                setStepLabel('second')\n        }\n    },[zoomfactor])\n\n    \n\n\n    return (\n        <animated.div className='DateSelector' ref={selector} >\n            <div className=\"Mask\"  >\n                <div {...bind()} className=\"touchMask\"> </div>\n\n                <DateSelectorScale className='scale' date={scaledate} zoomfactor={zoomfactor} step={step}></DateSelectorScale>\n                \n                <div className=\"TriangleContainer\" >\n                    <svg height=\"40\" width=\"20\" className=\"Triangle\">\n                        <polygon points=\"20,5 20,35 12,20\" />   \n                    </svg> \n                </div>        \n            </div>\n\n        </animated.div>\n                                  )\n}\nexport default DateSelector\n","import React, {useState, useEffect} from 'react';\nimport DateLabel from './components/datelabel2'\nimport DateController from './components/datecontroller'\nimport DateSelector from './components/dateselector'\n\n\nfunction DateManager({startdate, onDateChange, onFinalDateChange, animated}) {\n\n    const [selectorStartdate, setselectorStartdate] = useState(startdate)\n    const [controllerStartdate, setcontrollerStartdate] = useState(startdate)\n    const [labeldate, setLabelDate] = useState(startdate)\n    const [dateLabelHighlight,setDateLabelHighlight] = useState(1)\n\n    const handleSelectorDateChange = (date) => {\n        // console.log('handleSelectorDateChange:' + date.toJSON())\n        setLabelDate(date)\n        onDateChange(date)\n        // setscontrollerStartdate(date)\n    }\n\n    const handleSelectorFinalDateChange = (date) => {\n        // console.log('handleSelectorFinalDateChange:' + date.toJSON())\n        setcontrollerStartdate(date)\n        onFinalDateChange(date)\n    }\n    \n    const handleControllerDateChange = (date) => {\n        // console.log('handleControllerDateChange' + date.toJSON())\n        setselectorStartdate(date)\n        // onFinalDateChange(date)\n    }\n\n    const handleSelectorStepChange = (step) => {\n        console.log('handleSelectorStepChange' + step)\n        setDateLabelHighlight(step)\n    }\n\n    // useEffect(() => {\n    //     // console.log('startdate in date manager: '+startdate.toJSON())\n    //     setselectorStartdate(startdate)\n    // },[startdate])\n\n\n\n    return (\n        <div >\n          <DateController startdate={controllerStartdate} onDateChange={handleControllerDateChange}/>\n          <DateLabel date={labeldate} animated={animated} highlight={dateLabelHighlight}/>\n          <DateSelector startdate={selectorStartdate} \n                onDateChange={handleSelectorDateChange} \n                onFinalDateChange={handleSelectorFinalDateChange} \n                onStepChange={handleSelectorStepChange}/>\n        </div>\n    ) \n}\nexport default DateManager","import React, {useState} from \"react\";\nimport {useSpring, animated} from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport \"./controlpanel.css\"\n\n// import MissionSelector from \"./missionselector\";\n\n\n\n\n\nfunction ControlPanel(props) {\n\n    const [open, setOpen] = useState(false)\n\n    const [{ mr },set] = useSpring(() =>({ mr:  -300 }))\n    const bind = useGesture( {\n        onDrag: ({ down, delta, vxvy }) => {\n            if(vxvy[0]>1 || (!down && delta[0] > 100)) {\n                set({\n                    mr: -300\n                })\n                setOpen( true)\n            } else {\n                set({\n                    mr: down?-Math.max(delta[0],0):0\n                })\n                setOpen( false)\n            }\n        },\n    })\n\n\n    return   (\n\n        <animated.div {...bind()} style={{ right: mr, top:0 }} className='ControlPanel'>\n            <div>\n                <img id='logo'className='Logo' src='./images/EOi_logo.png' alt='' onClick={()=>!open?set({mr:-300}):set({mr:0})} />\n            </div>\n            \n            {props.children}\n        \n        </animated.div>\n\n\n    )\n    \n}\n\nexport default ControlPanel\n","import React, { useState, useEffect } from \"react\";\n\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './MissionSelector.css'\n\n\n// should use a prop\n\nfunction MissionSelector({initialmission, onMissionChange}) {\n\n\n    const [mission, setMission] = useState(initialmission)\n    \n    useHotkeys(\"1\",()=>{setMission('S1')}) \n    useHotkeys(\"2\",()=>{setMission('S2')}) \n    useHotkeys(\"3\",()=>{setMission('S3')}) \n    useHotkeys(\"5\",()=>{setMission('S5P')}) \n    useHotkeys(\"6\",()=>{setMission('ENVISAT')})\n\n    useEffect(() => {\n        console.log('Mission changed to: '+ mission)\n        onMissionChange(mission)\n    }, [mission]);\n    \n    \n    //console.log('mission rendering')\n    return (\n        <div className='MissionSelector'>\n            <div className={(mission == 'S1')?'CircleButtonSelected':'CircleButton'}><img className='MissionIcon' src='./images/s1_black.png' alt='' onClick={() => setMission('S1')} /></div>\n            <div className={(mission == 'S2')?'CircleButtonSelected':'CircleButton'}><img className='MissionIcon' src='./images/s2_black.png' alt='' onClick={() => setMission('S2')} /></div>\n            <div className={(mission == 'S3')?'CircleButtonSelected':'CircleButton'}><img className='MissionIcon' src='./images/s3_black.png' alt='' onClick={() => setMission('S3')} /></div>\n            <div className={(mission == 'S5P')?'CircleButtonSelected':'CircleButton'}><img className='MissionIcon' src='./images/s5p_black.png' alt='' onClick={() => setMission('S5P')} /></div>\n           \n            \n        </div>\n    )\n}\n\nexport default MissionSelector;\n","import React, {  useGlobal } from 'reactn';\n\nimport MissionSelector from \"../components/missionselector\"\n\nfunction C_MissionSelector() {\n\n    const [mission, setMission] = useGlobal('mission')\n\n    return (\n        <MissionSelector initialmission={mission} onMissionChange={setMission}></MissionSelector> \n     )\n}\n\nexport default C_MissionSelector;\n","import React, { useState, useEffect } from \"react\";\n\nimport './MapSelector.css'\n\n\n// should use a prop\n\nfunction MapSelector({mapSettings, onMapSettingsChange}) {\n\n\n    const [mapSet, setMapSet] = useState(mapSettings)\n\n    const toggleAtmosphere = () => setMapSet((mapSet)=>({...mapSet, atmosphere:!mapSet.atmosphere}))\n    const toggleStarfield = () => setMapSet((mapSet)=>({...mapSet, starfield:!mapSet.starfield}))\n    const toggleNames = () => setMapSet((mapSet)=>({...mapSet, names:!mapSet.names}))\n    const toggleBg = () => setMapSet((mapSet)=>({...mapSet, background:Math.random()}))\n\n\n    useEffect(() => {\n        onMapSettingsChange(mapSet)\n    }, [mapSet]);\n\n    useEffect(() => {\n        setMapSet(mapSettings)\n    }, [mapSettings]);\n\n\n    \n    //console.log('mission rendering')\n    return (\n        <div className='MapSelector'>\n            <div className={(mapSettings.atmosphere)?'CircleButtonSelected':'CircleButton'}><img className='MapIcon' draggable=\"false\" src='./images/atmosphere.png' alt='' onClick={toggleAtmosphere} /></div>\n            <div className={(mapSettings.starfield)?'CircleButtonSelected':'CircleButton'}><img className='MapIcon' draggable=\"false\" src='./images/starfield.png' alt='' onClick={toggleStarfield} /></div>\n            <div className={(mapSettings.names)?'CircleButtonSelected':'CircleButton'}><img className='MapIcon' draggable=\"false\" src='./images/names.png' alt='' onClick={toggleNames} /></div>\n            <div className='CircleButton'><img className='MapIcon' draggable=\"false\" src='./images/names.png' alt='' onClick={toggleBg} /></div>\n           \n        </div>\n    )\n}\n\nexport default MapSelector;\n","import React, {  useGlobal } from 'reactn';\n\nimport MapSelector from \"../components/mapselector\"\n\nfunction C_MapSelector() {\n\n    // const [starfield, setStarfield] = useGlobal('starfield')\n    // const [atmosphere, setAtmosphere] = useGlobal('atmosphere')\n    // const [names, setNames] = useGlobal('names')\n\n    const [mapSettings, setMapSettings] = useGlobal('mapSettings')\n\n    return (\n        <MapSelector mapSettings={mapSettings} onMapSettingsChange={setMapSettings}></MapSelector> \n     )\n}\n\nexport default C_MapSelector;\n","\nimport React, { useEffect } from \"react\";\nimport { useGlobal } from 'reactn';\n\nimport { HuePicker, AlphaPicker } from 'react-color';\nimport './ColorPicker.css'\n\n\nfunction HuePickerContainer() {\n\n\n    const [ appcolor, setAppcolor ] = useGlobal('appColor');\n\n    // useEffect(() => {\n    //     console.log('Mission changed to: '+ mission)\n    // }, [mission]);\n    \n    const handleChangeComplete = (color) => {\n        document.documentElement.style.setProperty('--color', color.hex);\n        //setAppcolor(color.hex );\n      };\n    \n    //console.log('mission rendering')\n    return (\n        <div className='ColorSelector'>\n            <HuePicker color={appcolor} onChangeComplete={handleChangeComplete }/>\n        </div>\n    )\n    // <AlphaPicker />  \n}\n\nexport default HuePickerContainer;\n\n\n\n","import React, {useState, useEffect, useCallback} from 'react'\nimport { useGlobal } from 'reactn'\n\nimport './App.css'\nimport Earth from '../earth'\nimport DateManager from '../datemanager'\nimport { useHotkeys } from 'react-hotkeys-hook'\nimport ControlPanel from \"../controlpanel\"\nimport C_MissionSelector from \"../../containers/MissionSelectorContainer\"\nimport C_MapSelector from \"../../containers/MapSelectorContainer\"\nimport HuePickerContainer from \"../../containers/HuePickerContainer\"\n\n// import useToggle from 'react-use/lib/useToggle'\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\"\n// import { useFullscreen } from '@straw-hat/react-fullscreen'\n\n\nfunction App() {\n    \n    let initdate = new Date()\n    const [viewdate, setViewdate] = useState(initdate)\n    const [startdate, ] = useState(initdate)\n    const [searching, setSearching] = useState(false)\n    // const [collection, setCollection] = useState('S1')\n\n    const handle = useFullScreenHandle();\n\n    const [ mission,  ] = useGlobal('mission');\n    const [ mapSettings, ] = useGlobal('mapSettings')\n    const [ appColor, ] = useGlobal('appColor')\n\n    const changeDate = (newdate) => {\n        // console.log('App changeDate callback: ' + newdate.toJSON())\n        setViewdate(newdate)\n    }\n\n    const finalChangeDate = (date) => {\n        console.log('Final Date: ' + date.toJSON())\n        // setSearching(true)\n    }\n\n    // manage full screen\n    // const fullScreen = useRef()\n    // fullScreen.current = false\n    const toggleFullScreen = () => {\n        if(!fullScreen.current) {\n            fullScreen.current = true\n            handle.enter()\n            console.log(\"will enter: \")\n        } else {\n            fullScreen.current = false\n            // handle.exit()\n            console.log(\"will exit: \")\n\n        }\n    }\n    const [fullScreen, setfullScreen] = useState(false);\n    // useHotkeys(\"f\",() => setfullScreen(isFull => !isFull)) \n    useHotkeys(\"f\",handle.enter) \n\n    useEffect(() => {\n        console.log('fullScreen changed to: '+fullScreen)\n        // if(fullScreen == false) handle.enter()\n    },[fullScreen])\n\n\n    useEffect(() => {\n        console.log('time to init earth')\n        console.log(mapSettings)\n        // if(fullScreen == false) handle.enter()\n    },[])\n\n    useEffect(() => {\n        console.log('mapSettings effect')\n        console.log(mapSettings)\n        // if(fullScreen == false) handle.enter()\n    },[mapSettings])\n\n    useEffect(() => {\n        console.log('appColor effect')\n        console.log(appColor)\n        // if(fullScreen == false) handle.enter()\n    },[appColor])\n\n    return (\n        <div className=\"App\" >\n             <FullScreen handle={handle}>\n                <div className=\"Earth\">\n                    <Earth id=\"globe\" \n                        viewdate={viewdate} \n                        starfield={mapSettings.starfield} \n                        atmosphere={mapSettings.atmosphere} \n                        names={mapSettings.names} \n                        background={mapSettings.background} \n                        clon='0.5' \n                        clat='40' \n                    />\n                </div>\n                <DateManager startdate={startdate} onDateChange={changeDate} onFinalDateChange={finalChangeDate} animated={searching}/>\n                <ControlPanel active=\"true\">\n                    <div class='logo'><img  src='./images/ESA_logo_2020_White.png' height=\"60\" ></img></div>\n                    <C_MissionSelector></C_MissionSelector>\n                    <C_MapSelector ></C_MapSelector>\n                    <HuePickerContainer></HuePickerContainer>\n                </ControlPanel>\n                <div className='MissionLabel'>{mission}</div>\n            </FullScreen>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { setGlobal } from 'reactn';\n\n\nexport  function initGlobalStates() {\n    console.log(\"init global: \"+(new Date()).getTime())\n\n    // Set current time as global state\n    // setGlobal({appdate: ((new Date()).getTime())})\n    // setGlobal({searchepoch: ((new Date()).getTime())})\n    // setGlobal({mission: 'S1'})\n    // setGlobal({searching: false})\n    // setGlobal({apppolygon: ''})\n    // setGlobal({replace: true})\n    // setGlobal({startend: {start:0, end:0}})\n    // setGlobal({setApppickeditems: []})\n\n\n    setGlobal({\n        mission: 'S1',\n        appColor: '#222222',\n        mapSettings: {\n            atmosphere: true,\n            starfield: true,\n            names: false,\n            background: 1,\n            dem: true\n        }\n    })\n    \n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\nimport {initGlobalStates} from \"./initGlobalStates\"\n\ninitGlobalStates()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}